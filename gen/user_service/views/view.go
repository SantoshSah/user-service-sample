// Code generated by goa v3.2.4, DO NOT EDIT.
//
// user_service views
//
// Command:
// $ goa gen github.com/SantoshSah/user-service-sample/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// Userresult is the viewed result type that is projected based on a view.
type Userresult struct {
	// Type to project
	Projected *UserresultView
	// View to render
	View string
}

// UserresultView is a type that runs validations on a projected type.
type UserresultView struct {
	// User UUID
	ID *string
	// User email
	Email *string
	// User name
	Name *string
	// If user has been verified
	IsVerified *bool
	// If user is active
	IsActive *bool
	// If user has agreed terms & conditions
	HasAgreed *bool
	// AccessToken to authenticate user for next processes
	AccessToken *string
	// RefreshToken to refresh auth token
	RefreshToken *string
	// User roles
	Roles UserroleresultCollectionView
}

// UserroleresultCollectionView is a type that runs validations on a projected
// type.
type UserroleresultCollectionView []*UserroleresultView

// UserroleresultView is a type that runs validations on a projected type.
type UserroleresultView struct {
	// UserRole UUID
	ID *string
	// User UUID
	UserID *string
	// Role UUID
	RoleID *string
	// If record is active
	IsActive *bool
	// role detail
	Role *RoleresultView
}

// RoleresultView is a type that runs validations on a projected type.
type RoleresultView struct {
	// role UUID
	ID *string
	// role name
	Name *string
	// service UUID the role belongs to
	ServiceID *string
	// If record is active
	IsActive *bool
}

var (
	// UserresultMap is a map of attribute names in result type Userresult indexed
	// by view name.
	UserresultMap = map[string][]string{
		"default": []string{
			"id",
			"email",
			"name",
			"isVerified",
			"isActive",
			"hasAgreed",
			"accessToken",
			"refreshToken",
			"roles",
		},
	}
	// UserroleresultCollectionMap is a map of attribute names in result type
	// UserroleresultCollection indexed by view name.
	UserroleresultCollectionMap = map[string][]string{
		"default": []string{
			"id",
			"userID",
			"roleID",
			"isActive",
			"role",
		},
	}
	// UserroleresultMap is a map of attribute names in result type Userroleresult
	// indexed by view name.
	UserroleresultMap = map[string][]string{
		"default": []string{
			"id",
			"userID",
			"roleID",
			"isActive",
			"role",
		},
	}
	// RoleresultMap is a map of attribute names in result type Roleresult indexed
	// by view name.
	RoleresultMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"serviceId",
			"isActive",
		},
	}
)

// ValidateUserresult runs the validations defined on the viewed result type
// Userresult.
func ValidateUserresult(result *Userresult) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateUserresultView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateUserresultView runs the validations defined on UserresultView using
// the "default" view.
func ValidateUserresultView(result *UserresultView) (err error) {

	if result.Roles != nil {
		if err2 := ValidateUserroleresultCollectionView(result.Roles); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUserroleresultCollectionView runs the validations defined on
// UserroleresultCollectionView using the "default" view.
func ValidateUserroleresultCollectionView(result UserroleresultCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateUserroleresultView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUserroleresultView runs the validations defined on
// UserroleresultView using the "default" view.
func ValidateUserroleresultView(result *UserroleresultView) (err error) {

	if result.Role != nil {
		if err2 := ValidateRoleresultView(result.Role); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateRoleresultView runs the validations defined on RoleresultView using
// the "default" view.
func ValidateRoleresultView(result *RoleresultView) (err error) {

	return
}
