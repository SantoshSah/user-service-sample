// Code generated by goa v3.2.4, DO NOT EDIT.
//
// user_service service
//
// Command:
// $ goa gen github.com/SantoshSah/user-service-sample/design

package userservice

import (
	"context"

	userserviceviews "github.com/SantoshSah/user-service-sample/gen/user_service/views"
	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// The user service manages users.
type Service interface {
	// Signup implements signup.
	Signup(context.Context, *SignupPayload) (res *Userresult, err error)
	// VerifyConfirmationToken implements verifyConfirmationToken.
	VerifyConfirmationToken(context.Context, *VerifyConfirmationTokenPayload) (res *Userresult, err error)
	// UpdateUsername implements updateUsername.
	UpdateUsername(context.Context, *UpdateUsernamePayload) (res *Userresult, err error)
	// VerifyPasswordResetToken implements verifyPasswordResetToken.
	VerifyPasswordResetToken(context.Context, *VerifyPasswordResetTokenPayload) (res *Userresult, err error)
	// ResetPassword implements resetPassword.
	ResetPassword(context.Context, *ResetPasswordPayload) (res *Userresult, err error)
	// ChangePassword implements changePassword.
	ChangePassword(context.Context, *ChangePasswordPayload) (res *Userresult, err error)
	// Login implements login.
	Login(context.Context, *LoginPayload) (res *Userresult, err error)
	// RefreshAccessToken implements refreshAccessToken.
	RefreshAccessToken(context.Context, *RefreshAccessTokenPayload) (res *Userresult, err error)
	// Logout implements logout.
	Logout(context.Context, *LogoutPayload) (res *MessageResult, err error)
	// ListUsers implements listUsers.
	ListUsers(context.Context, *ListUsersPayload) (res *ListUsersResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "user_service"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [10]string{"signup", "verifyConfirmationToken", "updateUsername", "verifyPasswordResetToken", "resetPassword", "changePassword", "login", "refreshAccessToken", "logout", "listUsers"}

// SignupPayload is the payload type of the user_service service signup method.
type SignupPayload struct {
	// User email address
	Email string
	// Tenant Header Name
	Tenant *string
}

// Userresult is the result type of the user_service service signup method.
type Userresult struct {
	// User UUID
	ID *string
	// User email
	Email *string
	// User name
	Name *string
	// If user has been verified
	IsVerified *bool
	// If user is active
	IsActive *bool
	// If user has agreed terms & conditions
	HasAgreed *bool
	// AccessToken to authenticate user for next processes
	AccessToken *string
	// RefreshToken to refresh auth token
	RefreshToken *string
	// User roles
	Roles UserroleresultCollection
}

// VerifyConfirmationTokenPayload is the payload type of the user_service
// service verifyConfirmationToken method.
type VerifyConfirmationTokenPayload struct {
	// UserId
	UserID string
	// Confirmation token
	ConfirmationToken uint64
	// Tenant Header Name
	Tenant *string
}

// UpdateUsernamePayload is the payload type of the user_service service
// updateUsername method.
type UpdateUsernamePayload struct {
	// JWT token used to perform authorization
	Token string
	// User name
	Name string
	// Tenant Header Name
	Tenant *string
}

// VerifyPasswordResetTokenPayload is the payload type of the user_service
// service verifyPasswordResetToken method.
type VerifyPasswordResetTokenPayload struct {
	// UserId
	UserID string
	// Password reset token
	PasswordResetToken uint64
	// Tenant Header Name
	Tenant *string
}

// ResetPasswordPayload is the payload type of the user_service service
// resetPassword method.
type ResetPasswordPayload struct {
	// User email
	Email string
	// Tenant Header Name
	Tenant *string
}

// ChangePasswordPayload is the payload type of the user_service service
// changePassword method.
type ChangePasswordPayload struct {
	// JWT token used to perform authorization
	Token string
	// User password
	Password string
	// Tenant Header Name
	Tenant *string
}

// LoginPayload is the payload type of the user_service service login method.
type LoginPayload struct {
	// User email
	Email string
	// User password
	Password string
	// Tenant Header Name
	Tenant *string
}

// RefreshAccessTokenPayload is the payload type of the user_service service
// refreshAccessToken method.
type RefreshAccessTokenPayload struct {
	// JWT token used to perform authorization
	Token string
	// Tenant Header Name
	Tenant *string
}

// LogoutPayload is the payload type of the user_service service logout method.
type LogoutPayload struct {
	// JWT token used to perform authorization
	Token string
	// Tenant Header Name
	Tenant *string
}

// MessageResult is the result type of the user_service service logout method.
type MessageResult struct {
	// Message type i.e. SUCCESS, ERROR
	Type *string
	// Message description
	Desc *string
}

// ListUsersPayload is the payload type of the user_service service listUsers
// method.
type ListUsersPayload struct {
	// JWT token used to perform authorization
	Token string
	// User email for search
	Email *string
	// User mobile number for search
	MobileNumber *string
	// User name for search
	Name *string
	// If user is active
	IsActive *string
	// If user is verified
	IsVerified *string
	// If user has agreed
	HasAgreed *string
	// User Role
	Role *string
	// Page Number for search
	PageNumber *int
	// pageSize per page
	PageSize *int
	// Tenant Header Name
	Tenant *string
}

// ListUsersResult is the result type of the user_service service listUsers
// method.
type ListUsersResult struct {
	// User Results
	Results UserresultCollection
	// Pagination information
	PageInfo *Pageinfo
}

type UserroleresultCollection []*Userroleresult

type Userroleresult struct {
	// UserRole UUID
	ID *string
	// User UUID
	UserID *string
	// Role UUID
	RoleID *string
	// If record is active
	IsActive *bool
	// role detail
	Role *Roleresult
}

type Roleresult struct {
	// role UUID
	ID *string
	// role name
	Name *string
	// service UUID the role belongs to
	ServiceID *string
	// If record is active
	IsActive *bool
}

type UserresultCollection []*Userresult

type Pageinfo struct {
	// Page Number for returned resultset
	PageNumber *int
	// Page size for returned resultset
	PageSize *int
	// Count of returned record set
	Count *int
	// Total Count for this query
	TotalCount *int64
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "NotFound",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "BadRequest",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewUserresult initializes result type Userresult from viewed result type
// Userresult.
func NewUserresult(vres *userserviceviews.Userresult) *Userresult {
	return newUserresult(vres.Projected)
}

// NewViewedUserresult initializes viewed result type Userresult from result
// type Userresult using the given view.
func NewViewedUserresult(res *Userresult, view string) *userserviceviews.Userresult {
	p := newUserresultView(res)
	return &userserviceviews.Userresult{Projected: p, View: "default"}
}

// newUserresult converts projected type Userresult to service type Userresult.
func newUserresult(vres *userserviceviews.UserresultView) *Userresult {
	res := &Userresult{
		ID:           vres.ID,
		Email:        vres.Email,
		Name:         vres.Name,
		IsVerified:   vres.IsVerified,
		IsActive:     vres.IsActive,
		HasAgreed:    vres.HasAgreed,
		AccessToken:  vres.AccessToken,
		RefreshToken: vres.RefreshToken,
	}
	if vres.Roles != nil {
		res.Roles = newUserroleresultCollection(vres.Roles)
	}
	return res
}

// newUserresultView projects result type Userresult to projected type
// UserresultView using the "default" view.
func newUserresultView(res *Userresult) *userserviceviews.UserresultView {
	vres := &userserviceviews.UserresultView{
		ID:           res.ID,
		Email:        res.Email,
		Name:         res.Name,
		IsVerified:   res.IsVerified,
		IsActive:     res.IsActive,
		HasAgreed:    res.HasAgreed,
		AccessToken:  res.AccessToken,
		RefreshToken: res.RefreshToken,
	}
	if res.Roles != nil {
		vres.Roles = newUserroleresultCollectionView(res.Roles)
	}
	return vres
}

// newUserroleresultCollection converts projected type UserroleresultCollection
// to service type UserroleresultCollection.
func newUserroleresultCollection(vres userserviceviews.UserroleresultCollectionView) UserroleresultCollection {
	res := make(UserroleresultCollection, len(vres))
	for i, n := range vres {
		res[i] = newUserroleresult(n)
	}
	return res
}

// newUserroleresultCollectionView projects result type
// UserroleresultCollection to projected type UserroleresultCollectionView
// using the "default" view.
func newUserroleresultCollectionView(res UserroleresultCollection) userserviceviews.UserroleresultCollectionView {
	vres := make(userserviceviews.UserroleresultCollectionView, len(res))
	for i, n := range res {
		vres[i] = newUserroleresultView(n)
	}
	return vres
}

// newUserroleresult converts projected type Userroleresult to service type
// Userroleresult.
func newUserroleresult(vres *userserviceviews.UserroleresultView) *Userroleresult {
	res := &Userroleresult{
		ID:       vres.ID,
		UserID:   vres.UserID,
		RoleID:   vres.RoleID,
		IsActive: vres.IsActive,
	}
	if vres.Role != nil {
		res.Role = newRoleresult(vres.Role)
	}
	return res
}

// newUserroleresultView projects result type Userroleresult to projected type
// UserroleresultView using the "default" view.
func newUserroleresultView(res *Userroleresult) *userserviceviews.UserroleresultView {
	vres := &userserviceviews.UserroleresultView{
		ID:       res.ID,
		UserID:   res.UserID,
		RoleID:   res.RoleID,
		IsActive: res.IsActive,
	}
	if res.Role != nil {
		vres.Role = newRoleresultView(res.Role)
	}
	return vres
}

// newRoleresult converts projected type Roleresult to service type Roleresult.
func newRoleresult(vres *userserviceviews.RoleresultView) *Roleresult {
	res := &Roleresult{
		ID:        vres.ID,
		Name:      vres.Name,
		ServiceID: vres.ServiceID,
		IsActive:  vres.IsActive,
	}
	return res
}

// newRoleresultView projects result type Roleresult to projected type
// RoleresultView using the "default" view.
func newRoleresultView(res *Roleresult) *userserviceviews.RoleresultView {
	vres := &userserviceviews.RoleresultView{
		ID:        res.ID,
		Name:      res.Name,
		ServiceID: res.ServiceID,
		IsActive:  res.IsActive,
	}
	return vres
}
