// Code generated by goa v3.2.4, DO NOT EDIT.
//
// user_server HTTP client CLI support package
//
// Command:
// $ goa gen github.com/SantoshSah/user-service-sample/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	userservicec "github.com/SantoshSah/user-service-sample/gen/http/user_service/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `user-service (signup|verify-confirmation-token|update-username|verify-password-reset-token|reset-password|change-password|login|refresh-access-token|logout|list-users)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` user-service signup --body '{
      "email": "Delectus alias quis perferendis culpa expedita."
   }' --tenant "Neque asperiores dolore quo autem."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		userServiceFlags = flag.NewFlagSet("user-service", flag.ContinueOnError)

		userServiceSignupFlags      = flag.NewFlagSet("signup", flag.ExitOnError)
		userServiceSignupBodyFlag   = userServiceSignupFlags.String("body", "REQUIRED", "")
		userServiceSignupTenantFlag = userServiceSignupFlags.String("tenant", "REQUIRED", "")

		userServiceVerifyConfirmationTokenFlags      = flag.NewFlagSet("verify-confirmation-token", flag.ExitOnError)
		userServiceVerifyConfirmationTokenBodyFlag   = userServiceVerifyConfirmationTokenFlags.String("body", "REQUIRED", "")
		userServiceVerifyConfirmationTokenTenantFlag = userServiceVerifyConfirmationTokenFlags.String("tenant", "REQUIRED", "")

		userServiceUpdateUsernameFlags      = flag.NewFlagSet("update-username", flag.ExitOnError)
		userServiceUpdateUsernameBodyFlag   = userServiceUpdateUsernameFlags.String("body", "REQUIRED", "")
		userServiceUpdateUsernameTenantFlag = userServiceUpdateUsernameFlags.String("tenant", "REQUIRED", "")
		userServiceUpdateUsernameTokenFlag  = userServiceUpdateUsernameFlags.String("token", "REQUIRED", "")

		userServiceVerifyPasswordResetTokenFlags      = flag.NewFlagSet("verify-password-reset-token", flag.ExitOnError)
		userServiceVerifyPasswordResetTokenBodyFlag   = userServiceVerifyPasswordResetTokenFlags.String("body", "REQUIRED", "")
		userServiceVerifyPasswordResetTokenTenantFlag = userServiceVerifyPasswordResetTokenFlags.String("tenant", "REQUIRED", "")

		userServiceResetPasswordFlags      = flag.NewFlagSet("reset-password", flag.ExitOnError)
		userServiceResetPasswordBodyFlag   = userServiceResetPasswordFlags.String("body", "REQUIRED", "")
		userServiceResetPasswordTenantFlag = userServiceResetPasswordFlags.String("tenant", "REQUIRED", "")

		userServiceChangePasswordFlags      = flag.NewFlagSet("change-password", flag.ExitOnError)
		userServiceChangePasswordBodyFlag   = userServiceChangePasswordFlags.String("body", "REQUIRED", "")
		userServiceChangePasswordTenantFlag = userServiceChangePasswordFlags.String("tenant", "REQUIRED", "")
		userServiceChangePasswordTokenFlag  = userServiceChangePasswordFlags.String("token", "REQUIRED", "")

		userServiceLoginFlags      = flag.NewFlagSet("login", flag.ExitOnError)
		userServiceLoginBodyFlag   = userServiceLoginFlags.String("body", "REQUIRED", "")
		userServiceLoginTenantFlag = userServiceLoginFlags.String("tenant", "REQUIRED", "")

		userServiceRefreshAccessTokenFlags      = flag.NewFlagSet("refresh-access-token", flag.ExitOnError)
		userServiceRefreshAccessTokenTenantFlag = userServiceRefreshAccessTokenFlags.String("tenant", "REQUIRED", "")
		userServiceRefreshAccessTokenTokenFlag  = userServiceRefreshAccessTokenFlags.String("token", "REQUIRED", "")

		userServiceLogoutFlags      = flag.NewFlagSet("logout", flag.ExitOnError)
		userServiceLogoutTenantFlag = userServiceLogoutFlags.String("tenant", "REQUIRED", "")
		userServiceLogoutTokenFlag  = userServiceLogoutFlags.String("token", "REQUIRED", "")

		userServiceListUsersFlags      = flag.NewFlagSet("list-users", flag.ExitOnError)
		userServiceListUsersBodyFlag   = userServiceListUsersFlags.String("body", "REQUIRED", "")
		userServiceListUsersTenantFlag = userServiceListUsersFlags.String("tenant", "REQUIRED", "")
		userServiceListUsersTokenFlag  = userServiceListUsersFlags.String("token", "REQUIRED", "")
	)
	userServiceFlags.Usage = userServiceUsage
	userServiceSignupFlags.Usage = userServiceSignupUsage
	userServiceVerifyConfirmationTokenFlags.Usage = userServiceVerifyConfirmationTokenUsage
	userServiceUpdateUsernameFlags.Usage = userServiceUpdateUsernameUsage
	userServiceVerifyPasswordResetTokenFlags.Usage = userServiceVerifyPasswordResetTokenUsage
	userServiceResetPasswordFlags.Usage = userServiceResetPasswordUsage
	userServiceChangePasswordFlags.Usage = userServiceChangePasswordUsage
	userServiceLoginFlags.Usage = userServiceLoginUsage
	userServiceRefreshAccessTokenFlags.Usage = userServiceRefreshAccessTokenUsage
	userServiceLogoutFlags.Usage = userServiceLogoutUsage
	userServiceListUsersFlags.Usage = userServiceListUsersUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "user-service":
			svcf = userServiceFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "user-service":
			switch epn {
			case "signup":
				epf = userServiceSignupFlags

			case "verify-confirmation-token":
				epf = userServiceVerifyConfirmationTokenFlags

			case "update-username":
				epf = userServiceUpdateUsernameFlags

			case "verify-password-reset-token":
				epf = userServiceVerifyPasswordResetTokenFlags

			case "reset-password":
				epf = userServiceResetPasswordFlags

			case "change-password":
				epf = userServiceChangePasswordFlags

			case "login":
				epf = userServiceLoginFlags

			case "refresh-access-token":
				epf = userServiceRefreshAccessTokenFlags

			case "logout":
				epf = userServiceLogoutFlags

			case "list-users":
				epf = userServiceListUsersFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "user-service":
			c := userservicec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "signup":
				endpoint = c.Signup()
				data, err = userservicec.BuildSignupPayload(*userServiceSignupBodyFlag, *userServiceSignupTenantFlag)
			case "verify-confirmation-token":
				endpoint = c.VerifyConfirmationToken()
				data, err = userservicec.BuildVerifyConfirmationTokenPayload(*userServiceVerifyConfirmationTokenBodyFlag, *userServiceVerifyConfirmationTokenTenantFlag)
			case "update-username":
				endpoint = c.UpdateUsername()
				data, err = userservicec.BuildUpdateUsernamePayload(*userServiceUpdateUsernameBodyFlag, *userServiceUpdateUsernameTenantFlag, *userServiceUpdateUsernameTokenFlag)
			case "verify-password-reset-token":
				endpoint = c.VerifyPasswordResetToken()
				data, err = userservicec.BuildVerifyPasswordResetTokenPayload(*userServiceVerifyPasswordResetTokenBodyFlag, *userServiceVerifyPasswordResetTokenTenantFlag)
			case "reset-password":
				endpoint = c.ResetPassword()
				data, err = userservicec.BuildResetPasswordPayload(*userServiceResetPasswordBodyFlag, *userServiceResetPasswordTenantFlag)
			case "change-password":
				endpoint = c.ChangePassword()
				data, err = userservicec.BuildChangePasswordPayload(*userServiceChangePasswordBodyFlag, *userServiceChangePasswordTenantFlag, *userServiceChangePasswordTokenFlag)
			case "login":
				endpoint = c.Login()
				data, err = userservicec.BuildLoginPayload(*userServiceLoginBodyFlag, *userServiceLoginTenantFlag)
			case "refresh-access-token":
				endpoint = c.RefreshAccessToken()
				data, err = userservicec.BuildRefreshAccessTokenPayload(*userServiceRefreshAccessTokenTenantFlag, *userServiceRefreshAccessTokenTokenFlag)
			case "logout":
				endpoint = c.Logout()
				data, err = userservicec.BuildLogoutPayload(*userServiceLogoutTenantFlag, *userServiceLogoutTokenFlag)
			case "list-users":
				endpoint = c.ListUsers()
				data, err = userservicec.BuildListUsersPayload(*userServiceListUsersBodyFlag, *userServiceListUsersTenantFlag, *userServiceListUsersTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// user-serviceUsage displays the usage of the user-service command and its
// subcommands.
func userServiceUsage() {
	fmt.Fprintf(os.Stderr, `The user service manages users.
Usage:
    %s [globalflags] user-service COMMAND [flags]

COMMAND:
    signup: Signup implements signup.
    verify-confirmation-token: VerifyConfirmationToken implements verifyConfirmationToken.
    update-username: UpdateUsername implements updateUsername.
    verify-password-reset-token: VerifyPasswordResetToken implements verifyPasswordResetToken.
    reset-password: ResetPassword implements resetPassword.
    change-password: ChangePassword implements changePassword.
    login: Login implements login.
    refresh-access-token: RefreshAccessToken implements refreshAccessToken.
    logout: Logout implements logout.
    list-users: ListUsers implements listUsers.

Additional help:
    %s user-service COMMAND --help
`, os.Args[0], os.Args[0])
}
func userServiceSignupUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user-service signup -body JSON -tenant STRING

Signup implements signup.
    -body JSON: 
    -tenant STRING: 

Example:
    `+os.Args[0]+` user-service signup --body '{
      "email": "Delectus alias quis perferendis culpa expedita."
   }' --tenant "Neque asperiores dolore quo autem."
`, os.Args[0])
}

func userServiceVerifyConfirmationTokenUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user-service verify-confirmation-token -body JSON -tenant STRING

VerifyConfirmationToken implements verifyConfirmationToken.
    -body JSON: 
    -tenant STRING: 

Example:
    `+os.Args[0]+` user-service verify-confirmation-token --body '{
      "confirmationToken": 1634527523334669514,
      "userId": "In vitae omnis."
   }' --tenant "Repellat debitis accusamus."
`, os.Args[0])
}

func userServiceUpdateUsernameUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user-service update-username -body JSON -tenant STRING -token STRING

UpdateUsername implements updateUsername.
    -body JSON: 
    -tenant STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` user-service update-username --body '{
      "name": "Sed molestias voluptas adipisci eius et fuga."
   }' --tenant "Nemo earum est doloremque." --token "Aut a."
`, os.Args[0])
}

func userServiceVerifyPasswordResetTokenUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user-service verify-password-reset-token -body JSON -tenant STRING

VerifyPasswordResetToken implements verifyPasswordResetToken.
    -body JSON: 
    -tenant STRING: 

Example:
    `+os.Args[0]+` user-service verify-password-reset-token --body '{
      "passwordResetToken": 1125933082736075628,
      "userId": "Nisi quibusdam ut omnis ipsa aut."
   }' --tenant "Ipsa quas omnis nostrum quis voluptatem soluta."
`, os.Args[0])
}

func userServiceResetPasswordUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user-service reset-password -body JSON -tenant STRING

ResetPassword implements resetPassword.
    -body JSON: 
    -tenant STRING: 

Example:
    `+os.Args[0]+` user-service reset-password --body '{
      "email": "Rerum non eligendi dolorem."
   }' --tenant "Unde vitae aliquid eos qui."
`, os.Args[0])
}

func userServiceChangePasswordUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user-service change-password -body JSON -tenant STRING -token STRING

ChangePassword implements changePassword.
    -body JSON: 
    -tenant STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` user-service change-password --body '{
      "password": "Id magni ad alias quasi nulla."
   }' --tenant "Qui doloribus inventore neque eligendi voluptas quisquam." --token "Totam aut molestiae qui incidunt."
`, os.Args[0])
}

func userServiceLoginUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user-service login -body JSON -tenant STRING

Login implements login.
    -body JSON: 
    -tenant STRING: 

Example:
    `+os.Args[0]+` user-service login --body '{
      "email": "Reprehenderit impedit laborum sed iure voluptatem dolorem.",
      "password": "Omnis laudantium sed molestias quia rerum omnis."
   }' --tenant "Dolores amet magni."
`, os.Args[0])
}

func userServiceRefreshAccessTokenUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user-service refresh-access-token -tenant STRING -token STRING

RefreshAccessToken implements refreshAccessToken.
    -tenant STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` user-service refresh-access-token --tenant "Quis laborum et nihil ut ex." --token "At rerum voluptatem numquam fugit."
`, os.Args[0])
}

func userServiceLogoutUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user-service logout -tenant STRING -token STRING

Logout implements logout.
    -tenant STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` user-service logout --tenant "Voluptas vel magni rerum accusantium quo minima." --token "Vero dicta voluptas voluptates iure aut."
`, os.Args[0])
}

func userServiceListUsersUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user-service list-users -body JSON -tenant STRING -token STRING

ListUsers implements listUsers.
    -body JSON: 
    -tenant STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` user-service list-users --body '{
      "email": "Voluptas quia autem labore.",
      "hasAgreed": "Quaerat aut magni sed.",
      "isActive": "Ea eaque.",
      "isVerified": "Aut odio et aperiam hic voluptas.",
      "mobileNumber": "At aut accusamus.",
      "name": "Laudantium modi consequuntur ullam quibusdam.",
      "pageNumber": 7059810287301451764,
      "pageSize": 4403827665034951324,
      "role": "Debitis sint dolore."
   }' --tenant "In aut aut." --token "Dignissimos odio optio reiciendis pariatur dolor quaerat."
`, os.Args[0])
}
