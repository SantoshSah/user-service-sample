// Code generated by goa v3.2.4, DO NOT EDIT.
//
// user_service HTTP client CLI support package
//
// Command:
// $ goa gen github.com/SantoshSah/user-service-sample/design

package client

import (
	"encoding/json"
	"fmt"

	userservice "github.com/SantoshSah/user-service-sample/gen/user_service"
)

// BuildSignupPayload builds the payload for the user_service signup endpoint
// from CLI flags.
func BuildSignupPayload(userServiceSignupBody string, userServiceSignupTenant string) (*userservice.SignupPayload, error) {
	var err error
	var body SignupRequestBody
	{
		err = json.Unmarshal([]byte(userServiceSignupBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"Delectus alias quis perferendis culpa expedita.\"\n   }'")
		}
	}
	var tenant string
	{
		tenant = userServiceSignupTenant
	}
	v := &userservice.SignupPayload{
		Email: body.Email,
	}
	v.Tenant = &tenant

	return v, nil
}

// BuildVerifyConfirmationTokenPayload builds the payload for the user_service
// verifyConfirmationToken endpoint from CLI flags.
func BuildVerifyConfirmationTokenPayload(userServiceVerifyConfirmationTokenBody string, userServiceVerifyConfirmationTokenTenant string) (*userservice.VerifyConfirmationTokenPayload, error) {
	var err error
	var body VerifyConfirmationTokenRequestBody
	{
		err = json.Unmarshal([]byte(userServiceVerifyConfirmationTokenBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"confirmationToken\": 1634527523334669514,\n      \"userId\": \"In vitae omnis.\"\n   }'")
		}
	}
	var tenant string
	{
		tenant = userServiceVerifyConfirmationTokenTenant
	}
	v := &userservice.VerifyConfirmationTokenPayload{
		UserID:            body.UserID,
		ConfirmationToken: body.ConfirmationToken,
	}
	v.Tenant = &tenant

	return v, nil
}

// BuildUpdateUsernamePayload builds the payload for the user_service
// updateUsername endpoint from CLI flags.
func BuildUpdateUsernamePayload(userServiceUpdateUsernameBody string, userServiceUpdateUsernameTenant string, userServiceUpdateUsernameToken string) (*userservice.UpdateUsernamePayload, error) {
	var err error
	var body UpdateUsernameRequestBody
	{
		err = json.Unmarshal([]byte(userServiceUpdateUsernameBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"name\": \"Sed molestias voluptas adipisci eius et fuga.\"\n   }'")
		}
	}
	var tenant string
	{
		tenant = userServiceUpdateUsernameTenant
	}
	var token string
	{
		token = userServiceUpdateUsernameToken
	}
	v := &userservice.UpdateUsernamePayload{
		Name: body.Name,
	}
	v.Tenant = &tenant
	v.Token = token

	return v, nil
}

// BuildVerifyPasswordResetTokenPayload builds the payload for the user_service
// verifyPasswordResetToken endpoint from CLI flags.
func BuildVerifyPasswordResetTokenPayload(userServiceVerifyPasswordResetTokenBody string, userServiceVerifyPasswordResetTokenTenant string) (*userservice.VerifyPasswordResetTokenPayload, error) {
	var err error
	var body VerifyPasswordResetTokenRequestBody
	{
		err = json.Unmarshal([]byte(userServiceVerifyPasswordResetTokenBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"passwordResetToken\": 1125933082736075628,\n      \"userId\": \"Nisi quibusdam ut omnis ipsa aut.\"\n   }'")
		}
	}
	var tenant string
	{
		tenant = userServiceVerifyPasswordResetTokenTenant
	}
	v := &userservice.VerifyPasswordResetTokenPayload{
		UserID:             body.UserID,
		PasswordResetToken: body.PasswordResetToken,
	}
	v.Tenant = &tenant

	return v, nil
}

// BuildResetPasswordPayload builds the payload for the user_service
// resetPassword endpoint from CLI flags.
func BuildResetPasswordPayload(userServiceResetPasswordBody string, userServiceResetPasswordTenant string) (*userservice.ResetPasswordPayload, error) {
	var err error
	var body ResetPasswordRequestBody
	{
		err = json.Unmarshal([]byte(userServiceResetPasswordBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"Rerum non eligendi dolorem.\"\n   }'")
		}
	}
	var tenant string
	{
		tenant = userServiceResetPasswordTenant
	}
	v := &userservice.ResetPasswordPayload{
		Email: body.Email,
	}
	v.Tenant = &tenant

	return v, nil
}

// BuildChangePasswordPayload builds the payload for the user_service
// changePassword endpoint from CLI flags.
func BuildChangePasswordPayload(userServiceChangePasswordBody string, userServiceChangePasswordTenant string, userServiceChangePasswordToken string) (*userservice.ChangePasswordPayload, error) {
	var err error
	var body ChangePasswordRequestBody
	{
		err = json.Unmarshal([]byte(userServiceChangePasswordBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"password\": \"Id magni ad alias quasi nulla.\"\n   }'")
		}
	}
	var tenant string
	{
		tenant = userServiceChangePasswordTenant
	}
	var token string
	{
		token = userServiceChangePasswordToken
	}
	v := &userservice.ChangePasswordPayload{
		Password: body.Password,
	}
	v.Tenant = &tenant
	v.Token = token

	return v, nil
}

// BuildLoginPayload builds the payload for the user_service login endpoint
// from CLI flags.
func BuildLoginPayload(userServiceLoginBody string, userServiceLoginTenant string) (*userservice.LoginPayload, error) {
	var err error
	var body LoginRequestBody
	{
		err = json.Unmarshal([]byte(userServiceLoginBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"Reprehenderit impedit laborum sed iure voluptatem dolorem.\",\n      \"password\": \"Omnis laudantium sed molestias quia rerum omnis.\"\n   }'")
		}
	}
	var tenant string
	{
		tenant = userServiceLoginTenant
	}
	v := &userservice.LoginPayload{
		Email:    body.Email,
		Password: body.Password,
	}
	v.Tenant = &tenant

	return v, nil
}

// BuildRefreshAccessTokenPayload builds the payload for the user_service
// refreshAccessToken endpoint from CLI flags.
func BuildRefreshAccessTokenPayload(userServiceRefreshAccessTokenTenant string, userServiceRefreshAccessTokenToken string) (*userservice.RefreshAccessTokenPayload, error) {
	var tenant string
	{
		tenant = userServiceRefreshAccessTokenTenant
	}
	var token string
	{
		token = userServiceRefreshAccessTokenToken
	}
	v := &userservice.RefreshAccessTokenPayload{}
	v.Tenant = &tenant
	v.Token = token

	return v, nil
}

// BuildLogoutPayload builds the payload for the user_service logout endpoint
// from CLI flags.
func BuildLogoutPayload(userServiceLogoutTenant string, userServiceLogoutToken string) (*userservice.LogoutPayload, error) {
	var tenant string
	{
		tenant = userServiceLogoutTenant
	}
	var token string
	{
		token = userServiceLogoutToken
	}
	v := &userservice.LogoutPayload{}
	v.Tenant = &tenant
	v.Token = token

	return v, nil
}

// BuildListUsersPayload builds the payload for the user_service listUsers
// endpoint from CLI flags.
func BuildListUsersPayload(userServiceListUsersBody string, userServiceListUsersTenant string, userServiceListUsersToken string) (*userservice.ListUsersPayload, error) {
	var err error
	var body ListUsersRequestBody
	{
		err = json.Unmarshal([]byte(userServiceListUsersBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"Voluptas quia autem labore.\",\n      \"hasAgreed\": \"Quaerat aut magni sed.\",\n      \"isActive\": \"Ea eaque.\",\n      \"isVerified\": \"Aut odio et aperiam hic voluptas.\",\n      \"mobileNumber\": \"At aut accusamus.\",\n      \"name\": \"Laudantium modi consequuntur ullam quibusdam.\",\n      \"pageNumber\": 7059810287301451764,\n      \"pageSize\": 4403827665034951324,\n      \"role\": \"Debitis sint dolore.\"\n   }'")
		}
	}
	var tenant string
	{
		tenant = userServiceListUsersTenant
	}
	var token string
	{
		token = userServiceListUsersToken
	}
	v := &userservice.ListUsersPayload{
		Email:        body.Email,
		MobileNumber: body.MobileNumber,
		Name:         body.Name,
		IsActive:     body.IsActive,
		IsVerified:   body.IsVerified,
		HasAgreed:    body.HasAgreed,
		Role:         body.Role,
		PageNumber:   body.PageNumber,
		PageSize:     body.PageSize,
	}
	v.Tenant = &tenant
	v.Token = token

	return v, nil
}
