// Code generated by goa v3.2.4, DO NOT EDIT.
//
// user_service HTTP client types
//
// Command:
// $ goa gen github.com/SantoshSah/user-service-sample/design

package client

import (
	userservice "github.com/SantoshSah/user-service-sample/gen/user_service"
	userserviceviews "github.com/SantoshSah/user-service-sample/gen/user_service/views"
	goa "goa.design/goa/v3/pkg"
)

// SignupRequestBody is the type of the "user_service" service "signup"
// endpoint HTTP request body.
type SignupRequestBody struct {
	// User email address
	Email string `form:"email" json:"email" xml:"email"`
}

// VerifyConfirmationTokenRequestBody is the type of the "user_service" service
// "verifyConfirmationToken" endpoint HTTP request body.
type VerifyConfirmationTokenRequestBody struct {
	// UserId
	UserID string `form:"userId" json:"userId" xml:"userId"`
	// Confirmation token
	ConfirmationToken uint64 `form:"confirmationToken" json:"confirmationToken" xml:"confirmationToken"`
}

// UpdateUsernameRequestBody is the type of the "user_service" service
// "updateUsername" endpoint HTTP request body.
type UpdateUsernameRequestBody struct {
	// User name
	Name string `form:"name" json:"name" xml:"name"`
}

// VerifyPasswordResetTokenRequestBody is the type of the "user_service"
// service "verifyPasswordResetToken" endpoint HTTP request body.
type VerifyPasswordResetTokenRequestBody struct {
	// UserId
	UserID string `form:"userId" json:"userId" xml:"userId"`
	// Password reset token
	PasswordResetToken uint64 `form:"passwordResetToken" json:"passwordResetToken" xml:"passwordResetToken"`
}

// ResetPasswordRequestBody is the type of the "user_service" service
// "resetPassword" endpoint HTTP request body.
type ResetPasswordRequestBody struct {
	// User email
	Email string `form:"email" json:"email" xml:"email"`
}

// ChangePasswordRequestBody is the type of the "user_service" service
// "changePassword" endpoint HTTP request body.
type ChangePasswordRequestBody struct {
	// User password
	Password string `form:"password" json:"password" xml:"password"`
}

// LoginRequestBody is the type of the "user_service" service "login" endpoint
// HTTP request body.
type LoginRequestBody struct {
	// User email
	Email string `form:"email" json:"email" xml:"email"`
	// User password
	Password string `form:"password" json:"password" xml:"password"`
}

// ListUsersRequestBody is the type of the "user_service" service "listUsers"
// endpoint HTTP request body.
type ListUsersRequestBody struct {
	// User email for search
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User mobile number for search
	MobileNumber *string `form:"mobileNumber,omitempty" json:"mobileNumber,omitempty" xml:"mobileNumber,omitempty"`
	// User name for search
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// If user is active
	IsActive *string `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	// If user is verified
	IsVerified *string `form:"isVerified,omitempty" json:"isVerified,omitempty" xml:"isVerified,omitempty"`
	// If user has agreed
	HasAgreed *string `form:"hasAgreed,omitempty" json:"hasAgreed,omitempty" xml:"hasAgreed,omitempty"`
	// User Role
	Role *string `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	// Page Number for search
	PageNumber *int `form:"pageNumber,omitempty" json:"pageNumber,omitempty" xml:"pageNumber,omitempty"`
	// pageSize per page
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty" xml:"pageSize,omitempty"`
}

// SignupResponseBody is the type of the "user_service" service "signup"
// endpoint HTTP response body.
type SignupResponseBody struct {
	// User UUID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// If user has been verified
	IsVerified *bool `form:"isVerified,omitempty" json:"isVerified,omitempty" xml:"isVerified,omitempty"`
	// If user is active
	IsActive *bool `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	// If user has agreed terms & conditions
	HasAgreed *bool `form:"hasAgreed,omitempty" json:"hasAgreed,omitempty" xml:"hasAgreed,omitempty"`
	// AccessToken to authenticate user for next processes
	AccessToken *string `form:"accessToken,omitempty" json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// RefreshToken to refresh auth token
	RefreshToken *string `form:"refreshToken,omitempty" json:"refreshToken,omitempty" xml:"refreshToken,omitempty"`
	// User roles
	Roles UserroleresultCollectionResponseBody `form:"roles,omitempty" json:"roles,omitempty" xml:"roles,omitempty"`
}

// VerifyConfirmationTokenResponseBody is the type of the "user_service"
// service "verifyConfirmationToken" endpoint HTTP response body.
type VerifyConfirmationTokenResponseBody struct {
	// User UUID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// If user has been verified
	IsVerified *bool `form:"isVerified,omitempty" json:"isVerified,omitempty" xml:"isVerified,omitempty"`
	// If user is active
	IsActive *bool `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	// If user has agreed terms & conditions
	HasAgreed *bool `form:"hasAgreed,omitempty" json:"hasAgreed,omitempty" xml:"hasAgreed,omitempty"`
	// AccessToken to authenticate user for next processes
	AccessToken *string `form:"accessToken,omitempty" json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// RefreshToken to refresh auth token
	RefreshToken *string `form:"refreshToken,omitempty" json:"refreshToken,omitempty" xml:"refreshToken,omitempty"`
	// User roles
	Roles UserroleresultCollectionResponseBody `form:"roles,omitempty" json:"roles,omitempty" xml:"roles,omitempty"`
}

// UpdateUsernameResponseBody is the type of the "user_service" service
// "updateUsername" endpoint HTTP response body.
type UpdateUsernameResponseBody struct {
	// User UUID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// If user has been verified
	IsVerified *bool `form:"isVerified,omitempty" json:"isVerified,omitempty" xml:"isVerified,omitempty"`
	// If user is active
	IsActive *bool `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	// If user has agreed terms & conditions
	HasAgreed *bool `form:"hasAgreed,omitempty" json:"hasAgreed,omitempty" xml:"hasAgreed,omitempty"`
	// AccessToken to authenticate user for next processes
	AccessToken *string `form:"accessToken,omitempty" json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// RefreshToken to refresh auth token
	RefreshToken *string `form:"refreshToken,omitempty" json:"refreshToken,omitempty" xml:"refreshToken,omitempty"`
	// User roles
	Roles UserroleresultCollectionResponseBody `form:"roles,omitempty" json:"roles,omitempty" xml:"roles,omitempty"`
}

// VerifyPasswordResetTokenResponseBody is the type of the "user_service"
// service "verifyPasswordResetToken" endpoint HTTP response body.
type VerifyPasswordResetTokenResponseBody struct {
	// User UUID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// If user has been verified
	IsVerified *bool `form:"isVerified,omitempty" json:"isVerified,omitempty" xml:"isVerified,omitempty"`
	// If user is active
	IsActive *bool `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	// If user has agreed terms & conditions
	HasAgreed *bool `form:"hasAgreed,omitempty" json:"hasAgreed,omitempty" xml:"hasAgreed,omitempty"`
	// AccessToken to authenticate user for next processes
	AccessToken *string `form:"accessToken,omitempty" json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// RefreshToken to refresh auth token
	RefreshToken *string `form:"refreshToken,omitempty" json:"refreshToken,omitempty" xml:"refreshToken,omitempty"`
	// User roles
	Roles UserroleresultCollectionResponseBody `form:"roles,omitempty" json:"roles,omitempty" xml:"roles,omitempty"`
}

// ResetPasswordResponseBody is the type of the "user_service" service
// "resetPassword" endpoint HTTP response body.
type ResetPasswordResponseBody struct {
	// User UUID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// If user has been verified
	IsVerified *bool `form:"isVerified,omitempty" json:"isVerified,omitempty" xml:"isVerified,omitempty"`
	// If user is active
	IsActive *bool `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	// If user has agreed terms & conditions
	HasAgreed *bool `form:"hasAgreed,omitempty" json:"hasAgreed,omitempty" xml:"hasAgreed,omitempty"`
	// AccessToken to authenticate user for next processes
	AccessToken *string `form:"accessToken,omitempty" json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// RefreshToken to refresh auth token
	RefreshToken *string `form:"refreshToken,omitempty" json:"refreshToken,omitempty" xml:"refreshToken,omitempty"`
	// User roles
	Roles UserroleresultCollectionResponseBody `form:"roles,omitempty" json:"roles,omitempty" xml:"roles,omitempty"`
}

// ChangePasswordResponseBody is the type of the "user_service" service
// "changePassword" endpoint HTTP response body.
type ChangePasswordResponseBody struct {
	// User UUID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// If user has been verified
	IsVerified *bool `form:"isVerified,omitempty" json:"isVerified,omitempty" xml:"isVerified,omitempty"`
	// If user is active
	IsActive *bool `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	// If user has agreed terms & conditions
	HasAgreed *bool `form:"hasAgreed,omitempty" json:"hasAgreed,omitempty" xml:"hasAgreed,omitempty"`
	// AccessToken to authenticate user for next processes
	AccessToken *string `form:"accessToken,omitempty" json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// RefreshToken to refresh auth token
	RefreshToken *string `form:"refreshToken,omitempty" json:"refreshToken,omitempty" xml:"refreshToken,omitempty"`
	// User roles
	Roles UserroleresultCollectionResponseBody `form:"roles,omitempty" json:"roles,omitempty" xml:"roles,omitempty"`
}

// LoginResponseBody is the type of the "user_service" service "login" endpoint
// HTTP response body.
type LoginResponseBody struct {
	// User UUID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// If user has been verified
	IsVerified *bool `form:"isVerified,omitempty" json:"isVerified,omitempty" xml:"isVerified,omitempty"`
	// If user is active
	IsActive *bool `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	// If user has agreed terms & conditions
	HasAgreed *bool `form:"hasAgreed,omitempty" json:"hasAgreed,omitempty" xml:"hasAgreed,omitempty"`
	// AccessToken to authenticate user for next processes
	AccessToken *string `form:"accessToken,omitempty" json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// RefreshToken to refresh auth token
	RefreshToken *string `form:"refreshToken,omitempty" json:"refreshToken,omitempty" xml:"refreshToken,omitempty"`
	// User roles
	Roles UserroleresultCollectionResponseBody `form:"roles,omitempty" json:"roles,omitempty" xml:"roles,omitempty"`
}

// RefreshAccessTokenResponseBody is the type of the "user_service" service
// "refreshAccessToken" endpoint HTTP response body.
type RefreshAccessTokenResponseBody struct {
	// User UUID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// If user has been verified
	IsVerified *bool `form:"isVerified,omitempty" json:"isVerified,omitempty" xml:"isVerified,omitempty"`
	// If user is active
	IsActive *bool `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	// If user has agreed terms & conditions
	HasAgreed *bool `form:"hasAgreed,omitempty" json:"hasAgreed,omitempty" xml:"hasAgreed,omitempty"`
	// AccessToken to authenticate user for next processes
	AccessToken *string `form:"accessToken,omitempty" json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// RefreshToken to refresh auth token
	RefreshToken *string `form:"refreshToken,omitempty" json:"refreshToken,omitempty" xml:"refreshToken,omitempty"`
	// User roles
	Roles UserroleresultCollectionResponseBody `form:"roles,omitempty" json:"roles,omitempty" xml:"roles,omitempty"`
}

// LogoutResponseBody is the type of the "user_service" service "logout"
// endpoint HTTP response body.
type LogoutResponseBody struct {
	// Message type i.e. SUCCESS, ERROR
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Message description
	Desc *string `form:"desc,omitempty" json:"desc,omitempty" xml:"desc,omitempty"`
}

// ListUsersResponseBody is the type of the "user_service" service "listUsers"
// endpoint HTTP response body.
type ListUsersResponseBody struct {
	// User Results
	Results UserresultCollectionResponseBody `form:"results,omitempty" json:"results,omitempty" xml:"results,omitempty"`
	// Pagination information
	PageInfo *PageinfoResponseBody `form:"pageInfo,omitempty" json:"pageInfo,omitempty" xml:"pageInfo,omitempty"`
}

// SignupNotFoundResponseBody is the type of the "user_service" service
// "signup" endpoint HTTP response body for the "NotFound" error.
type SignupNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// SignupBadRequestResponseBody is the type of the "user_service" service
// "signup" endpoint HTTP response body for the "BadRequest" error.
type SignupBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// VerifyConfirmationTokenNotFoundResponseBody is the type of the
// "user_service" service "verifyConfirmationToken" endpoint HTTP response body
// for the "NotFound" error.
type VerifyConfirmationTokenNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// VerifyConfirmationTokenBadRequestResponseBody is the type of the
// "user_service" service "verifyConfirmationToken" endpoint HTTP response body
// for the "BadRequest" error.
type VerifyConfirmationTokenBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateUsernameNotFoundResponseBody is the type of the "user_service" service
// "updateUsername" endpoint HTTP response body for the "NotFound" error.
type UpdateUsernameNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateUsernameBadRequestResponseBody is the type of the "user_service"
// service "updateUsername" endpoint HTTP response body for the "BadRequest"
// error.
type UpdateUsernameBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// VerifyPasswordResetTokenNotFoundResponseBody is the type of the
// "user_service" service "verifyPasswordResetToken" endpoint HTTP response
// body for the "NotFound" error.
type VerifyPasswordResetTokenNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// VerifyPasswordResetTokenBadRequestResponseBody is the type of the
// "user_service" service "verifyPasswordResetToken" endpoint HTTP response
// body for the "BadRequest" error.
type VerifyPasswordResetTokenBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ResetPasswordNotFoundResponseBody is the type of the "user_service" service
// "resetPassword" endpoint HTTP response body for the "NotFound" error.
type ResetPasswordNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ResetPasswordBadRequestResponseBody is the type of the "user_service"
// service "resetPassword" endpoint HTTP response body for the "BadRequest"
// error.
type ResetPasswordBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ChangePasswordNotFoundResponseBody is the type of the "user_service" service
// "changePassword" endpoint HTTP response body for the "NotFound" error.
type ChangePasswordNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ChangePasswordBadRequestResponseBody is the type of the "user_service"
// service "changePassword" endpoint HTTP response body for the "BadRequest"
// error.
type ChangePasswordBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// LoginNotFoundResponseBody is the type of the "user_service" service "login"
// endpoint HTTP response body for the "NotFound" error.
type LoginNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// LoginBadRequestResponseBody is the type of the "user_service" service
// "login" endpoint HTTP response body for the "BadRequest" error.
type LoginBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RefreshAccessTokenNotFoundResponseBody is the type of the "user_service"
// service "refreshAccessToken" endpoint HTTP response body for the "NotFound"
// error.
type RefreshAccessTokenNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RefreshAccessTokenBadRequestResponseBody is the type of the "user_service"
// service "refreshAccessToken" endpoint HTTP response body for the
// "BadRequest" error.
type RefreshAccessTokenBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// LogoutNotFoundResponseBody is the type of the "user_service" service
// "logout" endpoint HTTP response body for the "NotFound" error.
type LogoutNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// LogoutBadRequestResponseBody is the type of the "user_service" service
// "logout" endpoint HTTP response body for the "BadRequest" error.
type LogoutBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListUsersNotFoundResponseBody is the type of the "user_service" service
// "listUsers" endpoint HTTP response body for the "NotFound" error.
type ListUsersNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListUsersBadRequestResponseBody is the type of the "user_service" service
// "listUsers" endpoint HTTP response body for the "BadRequest" error.
type ListUsersBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UserroleresultCollectionResponseBody is used to define fields on response
// body types.
type UserroleresultCollectionResponseBody []*UserroleresultResponseBody

// UserroleresultResponseBody is used to define fields on response body types.
type UserroleresultResponseBody struct {
	// UserRole UUID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// User UUID
	UserID *string `form:"userID,omitempty" json:"userID,omitempty" xml:"userID,omitempty"`
	// Role UUID
	RoleID *string `form:"roleID,omitempty" json:"roleID,omitempty" xml:"roleID,omitempty"`
	// If record is active
	IsActive *bool `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	// role detail
	Role *RoleresultResponseBody `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
}

// RoleresultResponseBody is used to define fields on response body types.
type RoleresultResponseBody struct {
	// role UUID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// role name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// service UUID the role belongs to
	ServiceID *string `form:"serviceId,omitempty" json:"serviceId,omitempty" xml:"serviceId,omitempty"`
	// If record is active
	IsActive *bool `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
}

// UserresultCollectionResponseBody is used to define fields on response body
// types.
type UserresultCollectionResponseBody []*UserresultResponseBody

// UserresultResponseBody is used to define fields on response body types.
type UserresultResponseBody struct {
	// User UUID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// If user has been verified
	IsVerified *bool `form:"isVerified,omitempty" json:"isVerified,omitempty" xml:"isVerified,omitempty"`
	// If user is active
	IsActive *bool `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	// If user has agreed terms & conditions
	HasAgreed *bool `form:"hasAgreed,omitempty" json:"hasAgreed,omitempty" xml:"hasAgreed,omitempty"`
	// AccessToken to authenticate user for next processes
	AccessToken *string `form:"accessToken,omitempty" json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// RefreshToken to refresh auth token
	RefreshToken *string `form:"refreshToken,omitempty" json:"refreshToken,omitempty" xml:"refreshToken,omitempty"`
	// User roles
	Roles UserroleresultCollectionResponseBody `form:"roles,omitempty" json:"roles,omitempty" xml:"roles,omitempty"`
}

// PageinfoResponseBody is used to define fields on response body types.
type PageinfoResponseBody struct {
	// Page Number for returned resultset
	PageNumber *int `form:"pageNumber,omitempty" json:"pageNumber,omitempty" xml:"pageNumber,omitempty"`
	// Page size for returned resultset
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	// Count of returned record set
	Count *int `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	// Total Count for this query
	TotalCount *int64 `form:"totalCount,omitempty" json:"totalCount,omitempty" xml:"totalCount,omitempty"`
}

// NewSignupRequestBody builds the HTTP request body from the payload of the
// "signup" endpoint of the "user_service" service.
func NewSignupRequestBody(p *userservice.SignupPayload) *SignupRequestBody {
	body := &SignupRequestBody{
		Email: p.Email,
	}
	return body
}

// NewVerifyConfirmationTokenRequestBody builds the HTTP request body from the
// payload of the "verifyConfirmationToken" endpoint of the "user_service"
// service.
func NewVerifyConfirmationTokenRequestBody(p *userservice.VerifyConfirmationTokenPayload) *VerifyConfirmationTokenRequestBody {
	body := &VerifyConfirmationTokenRequestBody{
		UserID:            p.UserID,
		ConfirmationToken: p.ConfirmationToken,
	}
	return body
}

// NewUpdateUsernameRequestBody builds the HTTP request body from the payload
// of the "updateUsername" endpoint of the "user_service" service.
func NewUpdateUsernameRequestBody(p *userservice.UpdateUsernamePayload) *UpdateUsernameRequestBody {
	body := &UpdateUsernameRequestBody{
		Name: p.Name,
	}
	return body
}

// NewVerifyPasswordResetTokenRequestBody builds the HTTP request body from the
// payload of the "verifyPasswordResetToken" endpoint of the "user_service"
// service.
func NewVerifyPasswordResetTokenRequestBody(p *userservice.VerifyPasswordResetTokenPayload) *VerifyPasswordResetTokenRequestBody {
	body := &VerifyPasswordResetTokenRequestBody{
		UserID:             p.UserID,
		PasswordResetToken: p.PasswordResetToken,
	}
	return body
}

// NewResetPasswordRequestBody builds the HTTP request body from the payload of
// the "resetPassword" endpoint of the "user_service" service.
func NewResetPasswordRequestBody(p *userservice.ResetPasswordPayload) *ResetPasswordRequestBody {
	body := &ResetPasswordRequestBody{
		Email: p.Email,
	}
	return body
}

// NewChangePasswordRequestBody builds the HTTP request body from the payload
// of the "changePassword" endpoint of the "user_service" service.
func NewChangePasswordRequestBody(p *userservice.ChangePasswordPayload) *ChangePasswordRequestBody {
	body := &ChangePasswordRequestBody{
		Password: p.Password,
	}
	return body
}

// NewLoginRequestBody builds the HTTP request body from the payload of the
// "login" endpoint of the "user_service" service.
func NewLoginRequestBody(p *userservice.LoginPayload) *LoginRequestBody {
	body := &LoginRequestBody{
		Email:    p.Email,
		Password: p.Password,
	}
	return body
}

// NewListUsersRequestBody builds the HTTP request body from the payload of the
// "listUsers" endpoint of the "user_service" service.
func NewListUsersRequestBody(p *userservice.ListUsersPayload) *ListUsersRequestBody {
	body := &ListUsersRequestBody{
		Email:        p.Email,
		MobileNumber: p.MobileNumber,
		Name:         p.Name,
		IsActive:     p.IsActive,
		IsVerified:   p.IsVerified,
		HasAgreed:    p.HasAgreed,
		Role:         p.Role,
		PageNumber:   p.PageNumber,
		PageSize:     p.PageSize,
	}
	return body
}

// NewSignupUserresultOK builds a "user_service" service "signup" endpoint
// result from a HTTP "OK" response.
func NewSignupUserresultOK(body *SignupResponseBody) *userserviceviews.UserresultView {
	v := &userserviceviews.UserresultView{
		ID:           body.ID,
		Email:        body.Email,
		Name:         body.Name,
		IsVerified:   body.IsVerified,
		IsActive:     body.IsActive,
		HasAgreed:    body.HasAgreed,
		AccessToken:  body.AccessToken,
		RefreshToken: body.RefreshToken,
	}
	if body.Roles != nil {
		v.Roles = make([]*userserviceviews.UserroleresultView, len(body.Roles))
		for i, val := range body.Roles {
			v.Roles[i] = unmarshalUserroleresultResponseBodyToUserserviceviewsUserroleresultView(val)
		}
	}

	return v
}

// NewSignupNotFound builds a user_service service signup endpoint NotFound
// error.
func NewSignupNotFound(body *SignupNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewSignupBadRequest builds a user_service service signup endpoint BadRequest
// error.
func NewSignupBadRequest(body *SignupBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewVerifyConfirmationTokenUserresultOK builds a "user_service" service
// "verifyConfirmationToken" endpoint result from a HTTP "OK" response.
func NewVerifyConfirmationTokenUserresultOK(body *VerifyConfirmationTokenResponseBody) *userserviceviews.UserresultView {
	v := &userserviceviews.UserresultView{
		ID:           body.ID,
		Email:        body.Email,
		Name:         body.Name,
		IsVerified:   body.IsVerified,
		IsActive:     body.IsActive,
		HasAgreed:    body.HasAgreed,
		AccessToken:  body.AccessToken,
		RefreshToken: body.RefreshToken,
	}
	if body.Roles != nil {
		v.Roles = make([]*userserviceviews.UserroleresultView, len(body.Roles))
		for i, val := range body.Roles {
			v.Roles[i] = unmarshalUserroleresultResponseBodyToUserserviceviewsUserroleresultView(val)
		}
	}

	return v
}

// NewVerifyConfirmationTokenNotFound builds a user_service service
// verifyConfirmationToken endpoint NotFound error.
func NewVerifyConfirmationTokenNotFound(body *VerifyConfirmationTokenNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewVerifyConfirmationTokenBadRequest builds a user_service service
// verifyConfirmationToken endpoint BadRequest error.
func NewVerifyConfirmationTokenBadRequest(body *VerifyConfirmationTokenBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateUsernameUserresultOK builds a "user_service" service
// "updateUsername" endpoint result from a HTTP "OK" response.
func NewUpdateUsernameUserresultOK(body *UpdateUsernameResponseBody) *userserviceviews.UserresultView {
	v := &userserviceviews.UserresultView{
		ID:           body.ID,
		Email:        body.Email,
		Name:         body.Name,
		IsVerified:   body.IsVerified,
		IsActive:     body.IsActive,
		HasAgreed:    body.HasAgreed,
		AccessToken:  body.AccessToken,
		RefreshToken: body.RefreshToken,
	}
	if body.Roles != nil {
		v.Roles = make([]*userserviceviews.UserroleresultView, len(body.Roles))
		for i, val := range body.Roles {
			v.Roles[i] = unmarshalUserroleresultResponseBodyToUserserviceviewsUserroleresultView(val)
		}
	}

	return v
}

// NewUpdateUsernameNotFound builds a user_service service updateUsername
// endpoint NotFound error.
func NewUpdateUsernameNotFound(body *UpdateUsernameNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateUsernameBadRequest builds a user_service service updateUsername
// endpoint BadRequest error.
func NewUpdateUsernameBadRequest(body *UpdateUsernameBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewVerifyPasswordResetTokenUserresultOK builds a "user_service" service
// "verifyPasswordResetToken" endpoint result from a HTTP "OK" response.
func NewVerifyPasswordResetTokenUserresultOK(body *VerifyPasswordResetTokenResponseBody) *userserviceviews.UserresultView {
	v := &userserviceviews.UserresultView{
		ID:           body.ID,
		Email:        body.Email,
		Name:         body.Name,
		IsVerified:   body.IsVerified,
		IsActive:     body.IsActive,
		HasAgreed:    body.HasAgreed,
		AccessToken:  body.AccessToken,
		RefreshToken: body.RefreshToken,
	}
	if body.Roles != nil {
		v.Roles = make([]*userserviceviews.UserroleresultView, len(body.Roles))
		for i, val := range body.Roles {
			v.Roles[i] = unmarshalUserroleresultResponseBodyToUserserviceviewsUserroleresultView(val)
		}
	}

	return v
}

// NewVerifyPasswordResetTokenNotFound builds a user_service service
// verifyPasswordResetToken endpoint NotFound error.
func NewVerifyPasswordResetTokenNotFound(body *VerifyPasswordResetTokenNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewVerifyPasswordResetTokenBadRequest builds a user_service service
// verifyPasswordResetToken endpoint BadRequest error.
func NewVerifyPasswordResetTokenBadRequest(body *VerifyPasswordResetTokenBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewResetPasswordUserresultOK builds a "user_service" service "resetPassword"
// endpoint result from a HTTP "OK" response.
func NewResetPasswordUserresultOK(body *ResetPasswordResponseBody) *userserviceviews.UserresultView {
	v := &userserviceviews.UserresultView{
		ID:           body.ID,
		Email:        body.Email,
		Name:         body.Name,
		IsVerified:   body.IsVerified,
		IsActive:     body.IsActive,
		HasAgreed:    body.HasAgreed,
		AccessToken:  body.AccessToken,
		RefreshToken: body.RefreshToken,
	}
	if body.Roles != nil {
		v.Roles = make([]*userserviceviews.UserroleresultView, len(body.Roles))
		for i, val := range body.Roles {
			v.Roles[i] = unmarshalUserroleresultResponseBodyToUserserviceviewsUserroleresultView(val)
		}
	}

	return v
}

// NewResetPasswordNotFound builds a user_service service resetPassword
// endpoint NotFound error.
func NewResetPasswordNotFound(body *ResetPasswordNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewResetPasswordBadRequest builds a user_service service resetPassword
// endpoint BadRequest error.
func NewResetPasswordBadRequest(body *ResetPasswordBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewChangePasswordUserresultOK builds a "user_service" service
// "changePassword" endpoint result from a HTTP "OK" response.
func NewChangePasswordUserresultOK(body *ChangePasswordResponseBody) *userserviceviews.UserresultView {
	v := &userserviceviews.UserresultView{
		ID:           body.ID,
		Email:        body.Email,
		Name:         body.Name,
		IsVerified:   body.IsVerified,
		IsActive:     body.IsActive,
		HasAgreed:    body.HasAgreed,
		AccessToken:  body.AccessToken,
		RefreshToken: body.RefreshToken,
	}
	if body.Roles != nil {
		v.Roles = make([]*userserviceviews.UserroleresultView, len(body.Roles))
		for i, val := range body.Roles {
			v.Roles[i] = unmarshalUserroleresultResponseBodyToUserserviceviewsUserroleresultView(val)
		}
	}

	return v
}

// NewChangePasswordNotFound builds a user_service service changePassword
// endpoint NotFound error.
func NewChangePasswordNotFound(body *ChangePasswordNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewChangePasswordBadRequest builds a user_service service changePassword
// endpoint BadRequest error.
func NewChangePasswordBadRequest(body *ChangePasswordBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewLoginUserresultOK builds a "user_service" service "login" endpoint result
// from a HTTP "OK" response.
func NewLoginUserresultOK(body *LoginResponseBody) *userserviceviews.UserresultView {
	v := &userserviceviews.UserresultView{
		ID:           body.ID,
		Email:        body.Email,
		Name:         body.Name,
		IsVerified:   body.IsVerified,
		IsActive:     body.IsActive,
		HasAgreed:    body.HasAgreed,
		AccessToken:  body.AccessToken,
		RefreshToken: body.RefreshToken,
	}
	if body.Roles != nil {
		v.Roles = make([]*userserviceviews.UserroleresultView, len(body.Roles))
		for i, val := range body.Roles {
			v.Roles[i] = unmarshalUserroleresultResponseBodyToUserserviceviewsUserroleresultView(val)
		}
	}

	return v
}

// NewLoginNotFound builds a user_service service login endpoint NotFound error.
func NewLoginNotFound(body *LoginNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewLoginBadRequest builds a user_service service login endpoint BadRequest
// error.
func NewLoginBadRequest(body *LoginBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewRefreshAccessTokenUserresultOK builds a "user_service" service
// "refreshAccessToken" endpoint result from a HTTP "OK" response.
func NewRefreshAccessTokenUserresultOK(body *RefreshAccessTokenResponseBody) *userserviceviews.UserresultView {
	v := &userserviceviews.UserresultView{
		ID:           body.ID,
		Email:        body.Email,
		Name:         body.Name,
		IsVerified:   body.IsVerified,
		IsActive:     body.IsActive,
		HasAgreed:    body.HasAgreed,
		AccessToken:  body.AccessToken,
		RefreshToken: body.RefreshToken,
	}
	if body.Roles != nil {
		v.Roles = make([]*userserviceviews.UserroleresultView, len(body.Roles))
		for i, val := range body.Roles {
			v.Roles[i] = unmarshalUserroleresultResponseBodyToUserserviceviewsUserroleresultView(val)
		}
	}

	return v
}

// NewRefreshAccessTokenNotFound builds a user_service service
// refreshAccessToken endpoint NotFound error.
func NewRefreshAccessTokenNotFound(body *RefreshAccessTokenNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewRefreshAccessTokenBadRequest builds a user_service service
// refreshAccessToken endpoint BadRequest error.
func NewRefreshAccessTokenBadRequest(body *RefreshAccessTokenBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewLogoutMessageResultOK builds a "user_service" service "logout" endpoint
// result from a HTTP "OK" response.
func NewLogoutMessageResultOK(body *LogoutResponseBody) *userservice.MessageResult {
	v := &userservice.MessageResult{
		Type: body.Type,
		Desc: body.Desc,
	}

	return v
}

// NewLogoutNotFound builds a user_service service logout endpoint NotFound
// error.
func NewLogoutNotFound(body *LogoutNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewLogoutBadRequest builds a user_service service logout endpoint BadRequest
// error.
func NewLogoutBadRequest(body *LogoutBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListUsersResultOK builds a "user_service" service "listUsers" endpoint
// result from a HTTP "OK" response.
func NewListUsersResultOK(body *ListUsersResponseBody) *userservice.ListUsersResult {
	v := &userservice.ListUsersResult{}
	if body.Results != nil {
		v.Results = make([]*userservice.Userresult, len(body.Results))
		for i, val := range body.Results {
			v.Results[i] = unmarshalUserresultResponseBodyToUserserviceUserresult(val)
		}
	}
	if body.PageInfo != nil {
		v.PageInfo = unmarshalPageinfoResponseBodyToUserservicePageinfo(body.PageInfo)
	}

	return v
}

// NewListUsersNotFound builds a user_service service listUsers endpoint
// NotFound error.
func NewListUsersNotFound(body *ListUsersNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListUsersBadRequest builds a user_service service listUsers endpoint
// BadRequest error.
func NewListUsersBadRequest(body *ListUsersBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateSignupNotFoundResponseBody runs the validations defined on
// signup_NotFound_response_body
func ValidateSignupNotFoundResponseBody(body *SignupNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateSignupBadRequestResponseBody runs the validations defined on
// signup_BadRequest_response_body
func ValidateSignupBadRequestResponseBody(body *SignupBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateVerifyConfirmationTokenNotFoundResponseBody runs the validations
// defined on verifyConfirmationToken_NotFound_response_body
func ValidateVerifyConfirmationTokenNotFoundResponseBody(body *VerifyConfirmationTokenNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateVerifyConfirmationTokenBadRequestResponseBody runs the validations
// defined on verifyConfirmationToken_BadRequest_response_body
func ValidateVerifyConfirmationTokenBadRequestResponseBody(body *VerifyConfirmationTokenBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateUsernameNotFoundResponseBody runs the validations defined on
// updateUsername_NotFound_response_body
func ValidateUpdateUsernameNotFoundResponseBody(body *UpdateUsernameNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateUsernameBadRequestResponseBody runs the validations defined on
// updateUsername_BadRequest_response_body
func ValidateUpdateUsernameBadRequestResponseBody(body *UpdateUsernameBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateVerifyPasswordResetTokenNotFoundResponseBody runs the validations
// defined on verifyPasswordResetToken_NotFound_response_body
func ValidateVerifyPasswordResetTokenNotFoundResponseBody(body *VerifyPasswordResetTokenNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateVerifyPasswordResetTokenBadRequestResponseBody runs the validations
// defined on verifyPasswordResetToken_BadRequest_response_body
func ValidateVerifyPasswordResetTokenBadRequestResponseBody(body *VerifyPasswordResetTokenBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateResetPasswordNotFoundResponseBody runs the validations defined on
// resetPassword_NotFound_response_body
func ValidateResetPasswordNotFoundResponseBody(body *ResetPasswordNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateResetPasswordBadRequestResponseBody runs the validations defined on
// resetPassword_BadRequest_response_body
func ValidateResetPasswordBadRequestResponseBody(body *ResetPasswordBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateChangePasswordNotFoundResponseBody runs the validations defined on
// changePassword_NotFound_response_body
func ValidateChangePasswordNotFoundResponseBody(body *ChangePasswordNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateChangePasswordBadRequestResponseBody runs the validations defined on
// changePassword_BadRequest_response_body
func ValidateChangePasswordBadRequestResponseBody(body *ChangePasswordBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateLoginNotFoundResponseBody runs the validations defined on
// login_NotFound_response_body
func ValidateLoginNotFoundResponseBody(body *LoginNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateLoginBadRequestResponseBody runs the validations defined on
// login_BadRequest_response_body
func ValidateLoginBadRequestResponseBody(body *LoginBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRefreshAccessTokenNotFoundResponseBody runs the validations defined
// on refreshAccessToken_NotFound_response_body
func ValidateRefreshAccessTokenNotFoundResponseBody(body *RefreshAccessTokenNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRefreshAccessTokenBadRequestResponseBody runs the validations
// defined on refreshAccessToken_BadRequest_response_body
func ValidateRefreshAccessTokenBadRequestResponseBody(body *RefreshAccessTokenBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateLogoutNotFoundResponseBody runs the validations defined on
// logout_NotFound_response_body
func ValidateLogoutNotFoundResponseBody(body *LogoutNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateLogoutBadRequestResponseBody runs the validations defined on
// logout_BadRequest_response_body
func ValidateLogoutBadRequestResponseBody(body *LogoutBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListUsersNotFoundResponseBody runs the validations defined on
// listUsers_NotFound_response_body
func ValidateListUsersNotFoundResponseBody(body *ListUsersNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListUsersBadRequestResponseBody runs the validations defined on
// listUsers_BadRequest_response_body
func ValidateListUsersBadRequestResponseBody(body *ListUsersBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
