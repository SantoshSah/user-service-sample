// Code generated by goa v3.2.4, DO NOT EDIT.
//
// user_service HTTP server
//
// Command:
// $ goa gen github.com/SantoshSah/user-service-sample/design

package server

import (
	"context"
	"net/http"

	userservice "github.com/SantoshSah/user-service-sample/gen/user_service"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the user_service service endpoint HTTP handlers.
type Server struct {
	Mounts                   []*MountPoint
	Signup                   http.Handler
	VerifyConfirmationToken  http.Handler
	UpdateUsername           http.Handler
	VerifyPasswordResetToken http.Handler
	ResetPassword            http.Handler
	ChangePassword           http.Handler
	Login                    http.Handler
	RefreshAccessToken       http.Handler
	Logout                   http.Handler
	ListUsers                http.Handler
	CORS                     http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the user_service service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *userservice.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"Signup", "POST", "/signup"},
			{"VerifyConfirmationToken", "POST", "/verifyConfirmationToken"},
			{"UpdateUsername", "POST", "/updateUsername"},
			{"VerifyPasswordResetToken", "POST", "/verifyPasswordResetToken"},
			{"ResetPassword", "POST", "/resetPassword"},
			{"ChangePassword", "POST", "/changePassword"},
			{"Login", "POST", "/login"},
			{"RefreshAccessToken", "POST", "/refreshAccessToken"},
			{"Logout", "POST", "/logout"},
			{"ListUsers", "POST", "/listUsers"},
			{"CORS", "OPTIONS", "/signup"},
			{"CORS", "OPTIONS", "/verifyConfirmationToken"},
			{"CORS", "OPTIONS", "/updateUsername"},
			{"CORS", "OPTIONS", "/verifyPasswordResetToken"},
			{"CORS", "OPTIONS", "/resetPassword"},
			{"CORS", "OPTIONS", "/changePassword"},
			{"CORS", "OPTIONS", "/login"},
			{"CORS", "OPTIONS", "/refreshAccessToken"},
			{"CORS", "OPTIONS", "/logout"},
			{"CORS", "OPTIONS", "/listUsers"},
			{"CORS", "OPTIONS", "/openapi.yaml"},
			{"./gen/http/openapi.yaml", "GET", "/openapi.yaml"},
		},
		Signup:                   NewSignupHandler(e.Signup, mux, decoder, encoder, errhandler, formatter),
		VerifyConfirmationToken:  NewVerifyConfirmationTokenHandler(e.VerifyConfirmationToken, mux, decoder, encoder, errhandler, formatter),
		UpdateUsername:           NewUpdateUsernameHandler(e.UpdateUsername, mux, decoder, encoder, errhandler, formatter),
		VerifyPasswordResetToken: NewVerifyPasswordResetTokenHandler(e.VerifyPasswordResetToken, mux, decoder, encoder, errhandler, formatter),
		ResetPassword:            NewResetPasswordHandler(e.ResetPassword, mux, decoder, encoder, errhandler, formatter),
		ChangePassword:           NewChangePasswordHandler(e.ChangePassword, mux, decoder, encoder, errhandler, formatter),
		Login:                    NewLoginHandler(e.Login, mux, decoder, encoder, errhandler, formatter),
		RefreshAccessToken:       NewRefreshAccessTokenHandler(e.RefreshAccessToken, mux, decoder, encoder, errhandler, formatter),
		Logout:                   NewLogoutHandler(e.Logout, mux, decoder, encoder, errhandler, formatter),
		ListUsers:                NewListUsersHandler(e.ListUsers, mux, decoder, encoder, errhandler, formatter),
		CORS:                     NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "user_service" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.Signup = m(s.Signup)
	s.VerifyConfirmationToken = m(s.VerifyConfirmationToken)
	s.UpdateUsername = m(s.UpdateUsername)
	s.VerifyPasswordResetToken = m(s.VerifyPasswordResetToken)
	s.ResetPassword = m(s.ResetPassword)
	s.ChangePassword = m(s.ChangePassword)
	s.Login = m(s.Login)
	s.RefreshAccessToken = m(s.RefreshAccessToken)
	s.Logout = m(s.Logout)
	s.ListUsers = m(s.ListUsers)
	s.CORS = m(s.CORS)
}

// Mount configures the mux to serve the user_service endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountSignupHandler(mux, h.Signup)
	MountVerifyConfirmationTokenHandler(mux, h.VerifyConfirmationToken)
	MountUpdateUsernameHandler(mux, h.UpdateUsername)
	MountVerifyPasswordResetTokenHandler(mux, h.VerifyPasswordResetToken)
	MountResetPasswordHandler(mux, h.ResetPassword)
	MountChangePasswordHandler(mux, h.ChangePassword)
	MountLoginHandler(mux, h.Login)
	MountRefreshAccessTokenHandler(mux, h.RefreshAccessToken)
	MountLogoutHandler(mux, h.Logout)
	MountListUsersHandler(mux, h.ListUsers)
	MountCORSHandler(mux, h.CORS)
	MountGenHTTPOpenapiYaml(mux, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		http.ServeFile(w, r, "./gen/http/openapi.yaml")
	}))
}

// MountSignupHandler configures the mux to serve the "user_service" service
// "signup" endpoint.
func MountSignupHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleUserServiceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/signup", f)
}

// NewSignupHandler creates a HTTP handler which loads the HTTP request and
// calls the "user_service" service "signup" endpoint.
func NewSignupHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeSignupRequest(mux, decoder)
		encodeResponse = EncodeSignupResponse(encoder)
		encodeError    = EncodeSignupError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "signup")
		ctx = context.WithValue(ctx, goa.ServiceKey, "user_service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountVerifyConfirmationTokenHandler configures the mux to serve the
// "user_service" service "verifyConfirmationToken" endpoint.
func MountVerifyConfirmationTokenHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleUserServiceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/verifyConfirmationToken", f)
}

// NewVerifyConfirmationTokenHandler creates a HTTP handler which loads the
// HTTP request and calls the "user_service" service "verifyConfirmationToken"
// endpoint.
func NewVerifyConfirmationTokenHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeVerifyConfirmationTokenRequest(mux, decoder)
		encodeResponse = EncodeVerifyConfirmationTokenResponse(encoder)
		encodeError    = EncodeVerifyConfirmationTokenError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "verifyConfirmationToken")
		ctx = context.WithValue(ctx, goa.ServiceKey, "user_service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateUsernameHandler configures the mux to serve the "user_service"
// service "updateUsername" endpoint.
func MountUpdateUsernameHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleUserServiceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/updateUsername", f)
}

// NewUpdateUsernameHandler creates a HTTP handler which loads the HTTP request
// and calls the "user_service" service "updateUsername" endpoint.
func NewUpdateUsernameHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateUsernameRequest(mux, decoder)
		encodeResponse = EncodeUpdateUsernameResponse(encoder)
		encodeError    = EncodeUpdateUsernameError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "updateUsername")
		ctx = context.WithValue(ctx, goa.ServiceKey, "user_service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountVerifyPasswordResetTokenHandler configures the mux to serve the
// "user_service" service "verifyPasswordResetToken" endpoint.
func MountVerifyPasswordResetTokenHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleUserServiceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/verifyPasswordResetToken", f)
}

// NewVerifyPasswordResetTokenHandler creates a HTTP handler which loads the
// HTTP request and calls the "user_service" service "verifyPasswordResetToken"
// endpoint.
func NewVerifyPasswordResetTokenHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeVerifyPasswordResetTokenRequest(mux, decoder)
		encodeResponse = EncodeVerifyPasswordResetTokenResponse(encoder)
		encodeError    = EncodeVerifyPasswordResetTokenError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "verifyPasswordResetToken")
		ctx = context.WithValue(ctx, goa.ServiceKey, "user_service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountResetPasswordHandler configures the mux to serve the "user_service"
// service "resetPassword" endpoint.
func MountResetPasswordHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleUserServiceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/resetPassword", f)
}

// NewResetPasswordHandler creates a HTTP handler which loads the HTTP request
// and calls the "user_service" service "resetPassword" endpoint.
func NewResetPasswordHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeResetPasswordRequest(mux, decoder)
		encodeResponse = EncodeResetPasswordResponse(encoder)
		encodeError    = EncodeResetPasswordError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "resetPassword")
		ctx = context.WithValue(ctx, goa.ServiceKey, "user_service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountChangePasswordHandler configures the mux to serve the "user_service"
// service "changePassword" endpoint.
func MountChangePasswordHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleUserServiceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/changePassword", f)
}

// NewChangePasswordHandler creates a HTTP handler which loads the HTTP request
// and calls the "user_service" service "changePassword" endpoint.
func NewChangePasswordHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeChangePasswordRequest(mux, decoder)
		encodeResponse = EncodeChangePasswordResponse(encoder)
		encodeError    = EncodeChangePasswordError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "changePassword")
		ctx = context.WithValue(ctx, goa.ServiceKey, "user_service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountLoginHandler configures the mux to serve the "user_service" service
// "login" endpoint.
func MountLoginHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleUserServiceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/login", f)
}

// NewLoginHandler creates a HTTP handler which loads the HTTP request and
// calls the "user_service" service "login" endpoint.
func NewLoginHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeLoginRequest(mux, decoder)
		encodeResponse = EncodeLoginResponse(encoder)
		encodeError    = EncodeLoginError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "login")
		ctx = context.WithValue(ctx, goa.ServiceKey, "user_service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountRefreshAccessTokenHandler configures the mux to serve the
// "user_service" service "refreshAccessToken" endpoint.
func MountRefreshAccessTokenHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleUserServiceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/refreshAccessToken", f)
}

// NewRefreshAccessTokenHandler creates a HTTP handler which loads the HTTP
// request and calls the "user_service" service "refreshAccessToken" endpoint.
func NewRefreshAccessTokenHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeRefreshAccessTokenRequest(mux, decoder)
		encodeResponse = EncodeRefreshAccessTokenResponse(encoder)
		encodeError    = EncodeRefreshAccessTokenError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "refreshAccessToken")
		ctx = context.WithValue(ctx, goa.ServiceKey, "user_service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountLogoutHandler configures the mux to serve the "user_service" service
// "logout" endpoint.
func MountLogoutHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleUserServiceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/logout", f)
}

// NewLogoutHandler creates a HTTP handler which loads the HTTP request and
// calls the "user_service" service "logout" endpoint.
func NewLogoutHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeLogoutRequest(mux, decoder)
		encodeResponse = EncodeLogoutResponse(encoder)
		encodeError    = EncodeLogoutError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "logout")
		ctx = context.WithValue(ctx, goa.ServiceKey, "user_service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListUsersHandler configures the mux to serve the "user_service" service
// "listUsers" endpoint.
func MountListUsersHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleUserServiceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/listUsers", f)
}

// NewListUsersHandler creates a HTTP handler which loads the HTTP request and
// calls the "user_service" service "listUsers" endpoint.
func NewListUsersHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListUsersRequest(mux, decoder)
		encodeResponse = EncodeListUsersResponse(encoder)
		encodeError    = EncodeListUsersError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "listUsers")
		ctx = context.WithValue(ctx, goa.ServiceKey, "user_service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGenHTTPOpenapiYaml configures the mux to serve GET request made to
// "/openapi.yaml".
func MountGenHTTPOpenapiYaml(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/openapi.yaml", handleUserServiceOrigin(h).ServeHTTP)
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service user_service.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = handleUserServiceOrigin(h)
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("OPTIONS", "/signup", f)
	mux.Handle("OPTIONS", "/verifyConfirmationToken", f)
	mux.Handle("OPTIONS", "/updateUsername", f)
	mux.Handle("OPTIONS", "/verifyPasswordResetToken", f)
	mux.Handle("OPTIONS", "/resetPassword", f)
	mux.Handle("OPTIONS", "/changePassword", f)
	mux.Handle("OPTIONS", "/login", f)
	mux.Handle("OPTIONS", "/refreshAccessToken", f)
	mux.Handle("OPTIONS", "/logout", f)
	mux.Handle("OPTIONS", "/listUsers", f)
	mux.Handle("OPTIONS", "/openapi.yaml", f)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// handleUserServiceOrigin applies the CORS response headers corresponding to
// the origin for the service user_service.
func handleUserServiceOrigin(h http.Handler) http.Handler {
	origHndlr := h.(http.HandlerFunc)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			origHndlr(w, r)
			return
		}
		if cors.MatchOrigin(origin, "*") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Access-Control-Expose-Headers", "grpc-status,  grpc-message")
			w.Header().Set("Access-Control-Max-Age", "600")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, PUT, DELETE, POST, OPTIONS")
				w.Header().Set("Access-Control-Allow-Headers", "authorization, tenant, content-type, x-grpc-web, x-user-agent")
			}
			origHndlr(w, r)
			return
		}
		origHndlr(w, r)
		return
	})
}
