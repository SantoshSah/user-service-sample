// Code generated by goa v3.2.4, DO NOT EDIT.
//
// user_service HTTP server types
//
// Command:
// $ goa gen github.com/SantoshSah/user-service-sample/design

package server

import (
	userservice "github.com/SantoshSah/user-service-sample/gen/user_service"
	userserviceviews "github.com/SantoshSah/user-service-sample/gen/user_service/views"
	goa "goa.design/goa/v3/pkg"
)

// SignupRequestBody is the type of the "user_service" service "signup"
// endpoint HTTP request body.
type SignupRequestBody struct {
	// User email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// VerifyConfirmationTokenRequestBody is the type of the "user_service" service
// "verifyConfirmationToken" endpoint HTTP request body.
type VerifyConfirmationTokenRequestBody struct {
	// UserId
	UserID *string `form:"userId,omitempty" json:"userId,omitempty" xml:"userId,omitempty"`
	// Confirmation token
	ConfirmationToken *uint64 `form:"confirmationToken,omitempty" json:"confirmationToken,omitempty" xml:"confirmationToken,omitempty"`
}

// UpdateUsernameRequestBody is the type of the "user_service" service
// "updateUsername" endpoint HTTP request body.
type UpdateUsernameRequestBody struct {
	// User name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// VerifyPasswordResetTokenRequestBody is the type of the "user_service"
// service "verifyPasswordResetToken" endpoint HTTP request body.
type VerifyPasswordResetTokenRequestBody struct {
	// UserId
	UserID *string `form:"userId,omitempty" json:"userId,omitempty" xml:"userId,omitempty"`
	// Password reset token
	PasswordResetToken *uint64 `form:"passwordResetToken,omitempty" json:"passwordResetToken,omitempty" xml:"passwordResetToken,omitempty"`
}

// ResetPasswordRequestBody is the type of the "user_service" service
// "resetPassword" endpoint HTTP request body.
type ResetPasswordRequestBody struct {
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// ChangePasswordRequestBody is the type of the "user_service" service
// "changePassword" endpoint HTTP request body.
type ChangePasswordRequestBody struct {
	// User password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// LoginRequestBody is the type of the "user_service" service "login" endpoint
// HTTP request body.
type LoginRequestBody struct {
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// ListUsersRequestBody is the type of the "user_service" service "listUsers"
// endpoint HTTP request body.
type ListUsersRequestBody struct {
	// User email for search
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User mobile number for search
	MobileNumber *string `form:"mobileNumber,omitempty" json:"mobileNumber,omitempty" xml:"mobileNumber,omitempty"`
	// User name for search
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// If user is active
	IsActive *string `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	// If user is verified
	IsVerified *string `form:"isVerified,omitempty" json:"isVerified,omitempty" xml:"isVerified,omitempty"`
	// If user has agreed
	HasAgreed *string `form:"hasAgreed,omitempty" json:"hasAgreed,omitempty" xml:"hasAgreed,omitempty"`
	// User Role
	Role *string `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	// Page Number for search
	PageNumber *int `form:"pageNumber,omitempty" json:"pageNumber,omitempty" xml:"pageNumber,omitempty"`
	// pageSize per page
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty" xml:"pageSize,omitempty"`
}

// SignupResponseBody is the type of the "user_service" service "signup"
// endpoint HTTP response body.
type SignupResponseBody struct {
	// User UUID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// If user has been verified
	IsVerified *bool `form:"isVerified,omitempty" json:"isVerified,omitempty" xml:"isVerified,omitempty"`
	// If user is active
	IsActive *bool `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	// If user has agreed terms & conditions
	HasAgreed *bool `form:"hasAgreed,omitempty" json:"hasAgreed,omitempty" xml:"hasAgreed,omitempty"`
	// AccessToken to authenticate user for next processes
	AccessToken *string `form:"accessToken,omitempty" json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// RefreshToken to refresh auth token
	RefreshToken *string `form:"refreshToken,omitempty" json:"refreshToken,omitempty" xml:"refreshToken,omitempty"`
	// User roles
	Roles UserroleresultResponseBodyCollection `form:"roles,omitempty" json:"roles,omitempty" xml:"roles,omitempty"`
}

// VerifyConfirmationTokenResponseBody is the type of the "user_service"
// service "verifyConfirmationToken" endpoint HTTP response body.
type VerifyConfirmationTokenResponseBody struct {
	// User UUID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// If user has been verified
	IsVerified *bool `form:"isVerified,omitempty" json:"isVerified,omitempty" xml:"isVerified,omitempty"`
	// If user is active
	IsActive *bool `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	// If user has agreed terms & conditions
	HasAgreed *bool `form:"hasAgreed,omitempty" json:"hasAgreed,omitempty" xml:"hasAgreed,omitempty"`
	// AccessToken to authenticate user for next processes
	AccessToken *string `form:"accessToken,omitempty" json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// RefreshToken to refresh auth token
	RefreshToken *string `form:"refreshToken,omitempty" json:"refreshToken,omitempty" xml:"refreshToken,omitempty"`
	// User roles
	Roles UserroleresultResponseBodyCollection `form:"roles,omitempty" json:"roles,omitempty" xml:"roles,omitempty"`
}

// UpdateUsernameResponseBody is the type of the "user_service" service
// "updateUsername" endpoint HTTP response body.
type UpdateUsernameResponseBody struct {
	// User UUID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// If user has been verified
	IsVerified *bool `form:"isVerified,omitempty" json:"isVerified,omitempty" xml:"isVerified,omitempty"`
	// If user is active
	IsActive *bool `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	// If user has agreed terms & conditions
	HasAgreed *bool `form:"hasAgreed,omitempty" json:"hasAgreed,omitempty" xml:"hasAgreed,omitempty"`
	// AccessToken to authenticate user for next processes
	AccessToken *string `form:"accessToken,omitempty" json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// RefreshToken to refresh auth token
	RefreshToken *string `form:"refreshToken,omitempty" json:"refreshToken,omitempty" xml:"refreshToken,omitempty"`
	// User roles
	Roles UserroleresultResponseBodyCollection `form:"roles,omitempty" json:"roles,omitempty" xml:"roles,omitempty"`
}

// VerifyPasswordResetTokenResponseBody is the type of the "user_service"
// service "verifyPasswordResetToken" endpoint HTTP response body.
type VerifyPasswordResetTokenResponseBody struct {
	// User UUID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// If user has been verified
	IsVerified *bool `form:"isVerified,omitempty" json:"isVerified,omitempty" xml:"isVerified,omitempty"`
	// If user is active
	IsActive *bool `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	// If user has agreed terms & conditions
	HasAgreed *bool `form:"hasAgreed,omitempty" json:"hasAgreed,omitempty" xml:"hasAgreed,omitempty"`
	// AccessToken to authenticate user for next processes
	AccessToken *string `form:"accessToken,omitempty" json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// RefreshToken to refresh auth token
	RefreshToken *string `form:"refreshToken,omitempty" json:"refreshToken,omitempty" xml:"refreshToken,omitempty"`
	// User roles
	Roles UserroleresultResponseBodyCollection `form:"roles,omitempty" json:"roles,omitempty" xml:"roles,omitempty"`
}

// ResetPasswordResponseBody is the type of the "user_service" service
// "resetPassword" endpoint HTTP response body.
type ResetPasswordResponseBody struct {
	// User UUID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// If user has been verified
	IsVerified *bool `form:"isVerified,omitempty" json:"isVerified,omitempty" xml:"isVerified,omitempty"`
	// If user is active
	IsActive *bool `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	// If user has agreed terms & conditions
	HasAgreed *bool `form:"hasAgreed,omitempty" json:"hasAgreed,omitempty" xml:"hasAgreed,omitempty"`
	// AccessToken to authenticate user for next processes
	AccessToken *string `form:"accessToken,omitempty" json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// RefreshToken to refresh auth token
	RefreshToken *string `form:"refreshToken,omitempty" json:"refreshToken,omitempty" xml:"refreshToken,omitempty"`
	// User roles
	Roles UserroleresultResponseBodyCollection `form:"roles,omitempty" json:"roles,omitempty" xml:"roles,omitempty"`
}

// ChangePasswordResponseBody is the type of the "user_service" service
// "changePassword" endpoint HTTP response body.
type ChangePasswordResponseBody struct {
	// User UUID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// If user has been verified
	IsVerified *bool `form:"isVerified,omitempty" json:"isVerified,omitempty" xml:"isVerified,omitempty"`
	// If user is active
	IsActive *bool `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	// If user has agreed terms & conditions
	HasAgreed *bool `form:"hasAgreed,omitempty" json:"hasAgreed,omitempty" xml:"hasAgreed,omitempty"`
	// AccessToken to authenticate user for next processes
	AccessToken *string `form:"accessToken,omitempty" json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// RefreshToken to refresh auth token
	RefreshToken *string `form:"refreshToken,omitempty" json:"refreshToken,omitempty" xml:"refreshToken,omitempty"`
	// User roles
	Roles UserroleresultResponseBodyCollection `form:"roles,omitempty" json:"roles,omitempty" xml:"roles,omitempty"`
}

// LoginResponseBody is the type of the "user_service" service "login" endpoint
// HTTP response body.
type LoginResponseBody struct {
	// User UUID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// If user has been verified
	IsVerified *bool `form:"isVerified,omitempty" json:"isVerified,omitempty" xml:"isVerified,omitempty"`
	// If user is active
	IsActive *bool `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	// If user has agreed terms & conditions
	HasAgreed *bool `form:"hasAgreed,omitempty" json:"hasAgreed,omitempty" xml:"hasAgreed,omitempty"`
	// AccessToken to authenticate user for next processes
	AccessToken *string `form:"accessToken,omitempty" json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// RefreshToken to refresh auth token
	RefreshToken *string `form:"refreshToken,omitempty" json:"refreshToken,omitempty" xml:"refreshToken,omitempty"`
	// User roles
	Roles UserroleresultResponseBodyCollection `form:"roles,omitempty" json:"roles,omitempty" xml:"roles,omitempty"`
}

// RefreshAccessTokenResponseBody is the type of the "user_service" service
// "refreshAccessToken" endpoint HTTP response body.
type RefreshAccessTokenResponseBody struct {
	// User UUID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// If user has been verified
	IsVerified *bool `form:"isVerified,omitempty" json:"isVerified,omitempty" xml:"isVerified,omitempty"`
	// If user is active
	IsActive *bool `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	// If user has agreed terms & conditions
	HasAgreed *bool `form:"hasAgreed,omitempty" json:"hasAgreed,omitempty" xml:"hasAgreed,omitempty"`
	// AccessToken to authenticate user for next processes
	AccessToken *string `form:"accessToken,omitempty" json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// RefreshToken to refresh auth token
	RefreshToken *string `form:"refreshToken,omitempty" json:"refreshToken,omitempty" xml:"refreshToken,omitempty"`
	// User roles
	Roles UserroleresultResponseBodyCollection `form:"roles,omitempty" json:"roles,omitempty" xml:"roles,omitempty"`
}

// LogoutResponseBody is the type of the "user_service" service "logout"
// endpoint HTTP response body.
type LogoutResponseBody struct {
	// Message type i.e. SUCCESS, ERROR
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Message description
	Desc *string `form:"desc,omitempty" json:"desc,omitempty" xml:"desc,omitempty"`
}

// ListUsersResponseBody is the type of the "user_service" service "listUsers"
// endpoint HTTP response body.
type ListUsersResponseBody struct {
	// User Results
	Results UserresultCollectionResponseBody `form:"results,omitempty" json:"results,omitempty" xml:"results,omitempty"`
	// Pagination information
	PageInfo *PageinfoResponseBody `form:"pageInfo,omitempty" json:"pageInfo,omitempty" xml:"pageInfo,omitempty"`
}

// SignupNotFoundResponseBody is the type of the "user_service" service
// "signup" endpoint HTTP response body for the "NotFound" error.
type SignupNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SignupBadRequestResponseBody is the type of the "user_service" service
// "signup" endpoint HTTP response body for the "BadRequest" error.
type SignupBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// VerifyConfirmationTokenNotFoundResponseBody is the type of the
// "user_service" service "verifyConfirmationToken" endpoint HTTP response body
// for the "NotFound" error.
type VerifyConfirmationTokenNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// VerifyConfirmationTokenBadRequestResponseBody is the type of the
// "user_service" service "verifyConfirmationToken" endpoint HTTP response body
// for the "BadRequest" error.
type VerifyConfirmationTokenBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateUsernameNotFoundResponseBody is the type of the "user_service" service
// "updateUsername" endpoint HTTP response body for the "NotFound" error.
type UpdateUsernameNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateUsernameBadRequestResponseBody is the type of the "user_service"
// service "updateUsername" endpoint HTTP response body for the "BadRequest"
// error.
type UpdateUsernameBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// VerifyPasswordResetTokenNotFoundResponseBody is the type of the
// "user_service" service "verifyPasswordResetToken" endpoint HTTP response
// body for the "NotFound" error.
type VerifyPasswordResetTokenNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// VerifyPasswordResetTokenBadRequestResponseBody is the type of the
// "user_service" service "verifyPasswordResetToken" endpoint HTTP response
// body for the "BadRequest" error.
type VerifyPasswordResetTokenBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ResetPasswordNotFoundResponseBody is the type of the "user_service" service
// "resetPassword" endpoint HTTP response body for the "NotFound" error.
type ResetPasswordNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ResetPasswordBadRequestResponseBody is the type of the "user_service"
// service "resetPassword" endpoint HTTP response body for the "BadRequest"
// error.
type ResetPasswordBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ChangePasswordNotFoundResponseBody is the type of the "user_service" service
// "changePassword" endpoint HTTP response body for the "NotFound" error.
type ChangePasswordNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ChangePasswordBadRequestResponseBody is the type of the "user_service"
// service "changePassword" endpoint HTTP response body for the "BadRequest"
// error.
type ChangePasswordBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoginNotFoundResponseBody is the type of the "user_service" service "login"
// endpoint HTTP response body for the "NotFound" error.
type LoginNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoginBadRequestResponseBody is the type of the "user_service" service
// "login" endpoint HTTP response body for the "BadRequest" error.
type LoginBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RefreshAccessTokenNotFoundResponseBody is the type of the "user_service"
// service "refreshAccessToken" endpoint HTTP response body for the "NotFound"
// error.
type RefreshAccessTokenNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RefreshAccessTokenBadRequestResponseBody is the type of the "user_service"
// service "refreshAccessToken" endpoint HTTP response body for the
// "BadRequest" error.
type RefreshAccessTokenBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LogoutNotFoundResponseBody is the type of the "user_service" service
// "logout" endpoint HTTP response body for the "NotFound" error.
type LogoutNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LogoutBadRequestResponseBody is the type of the "user_service" service
// "logout" endpoint HTTP response body for the "BadRequest" error.
type LogoutBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListUsersNotFoundResponseBody is the type of the "user_service" service
// "listUsers" endpoint HTTP response body for the "NotFound" error.
type ListUsersNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListUsersBadRequestResponseBody is the type of the "user_service" service
// "listUsers" endpoint HTTP response body for the "BadRequest" error.
type ListUsersBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UserroleresultResponseBodyCollection is used to define fields on response
// body types.
type UserroleresultResponseBodyCollection []*UserroleresultResponseBody

// UserroleresultResponseBody is used to define fields on response body types.
type UserroleresultResponseBody struct {
	// UserRole UUID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// User UUID
	UserID *string `form:"userID,omitempty" json:"userID,omitempty" xml:"userID,omitempty"`
	// Role UUID
	RoleID *string `form:"roleID,omitempty" json:"roleID,omitempty" xml:"roleID,omitempty"`
	// If record is active
	IsActive *bool `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	// role detail
	Role *RoleresultResponseBody `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
}

// RoleresultResponseBody is used to define fields on response body types.
type RoleresultResponseBody struct {
	// role UUID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// role name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// service UUID the role belongs to
	ServiceID *string `form:"serviceId,omitempty" json:"serviceId,omitempty" xml:"serviceId,omitempty"`
	// If record is active
	IsActive *bool `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
}

// UserresultCollectionResponseBody is used to define fields on response body
// types.
type UserresultCollectionResponseBody []*UserresultResponseBody

// UserresultResponseBody is used to define fields on response body types.
type UserresultResponseBody struct {
	// User UUID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// If user has been verified
	IsVerified *bool `form:"isVerified,omitempty" json:"isVerified,omitempty" xml:"isVerified,omitempty"`
	// If user is active
	IsActive *bool `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	// If user has agreed terms & conditions
	HasAgreed *bool `form:"hasAgreed,omitempty" json:"hasAgreed,omitempty" xml:"hasAgreed,omitempty"`
	// AccessToken to authenticate user for next processes
	AccessToken *string `form:"accessToken,omitempty" json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// RefreshToken to refresh auth token
	RefreshToken *string `form:"refreshToken,omitempty" json:"refreshToken,omitempty" xml:"refreshToken,omitempty"`
	// User roles
	Roles UserroleresultCollectionResponseBody `form:"roles,omitempty" json:"roles,omitempty" xml:"roles,omitempty"`
}

// UserroleresultCollectionResponseBody is used to define fields on response
// body types.
type UserroleresultCollectionResponseBody []*UserroleresultResponseBody

// PageinfoResponseBody is used to define fields on response body types.
type PageinfoResponseBody struct {
	// Page Number for returned resultset
	PageNumber *int `form:"pageNumber,omitempty" json:"pageNumber,omitempty" xml:"pageNumber,omitempty"`
	// Page size for returned resultset
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	// Count of returned record set
	Count *int `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	// Total Count for this query
	TotalCount *int64 `form:"totalCount,omitempty" json:"totalCount,omitempty" xml:"totalCount,omitempty"`
}

// NewSignupResponseBody builds the HTTP response body from the result of the
// "signup" endpoint of the "user_service" service.
func NewSignupResponseBody(res *userserviceviews.UserresultView) *SignupResponseBody {
	body := &SignupResponseBody{
		ID:           res.ID,
		Email:        res.Email,
		Name:         res.Name,
		IsVerified:   res.IsVerified,
		IsActive:     res.IsActive,
		HasAgreed:    res.HasAgreed,
		AccessToken:  res.AccessToken,
		RefreshToken: res.RefreshToken,
	}
	if res.Roles != nil {
		body.Roles = make([]*UserroleresultResponseBody, len(res.Roles))
		for i, val := range res.Roles {
			body.Roles[i] = marshalUserserviceviewsUserroleresultViewToUserroleresultResponseBody(val)
		}
	}
	return body
}

// NewVerifyConfirmationTokenResponseBody builds the HTTP response body from
// the result of the "verifyConfirmationToken" endpoint of the "user_service"
// service.
func NewVerifyConfirmationTokenResponseBody(res *userserviceviews.UserresultView) *VerifyConfirmationTokenResponseBody {
	body := &VerifyConfirmationTokenResponseBody{
		ID:           res.ID,
		Email:        res.Email,
		Name:         res.Name,
		IsVerified:   res.IsVerified,
		IsActive:     res.IsActive,
		HasAgreed:    res.HasAgreed,
		AccessToken:  res.AccessToken,
		RefreshToken: res.RefreshToken,
	}
	if res.Roles != nil {
		body.Roles = make([]*UserroleresultResponseBody, len(res.Roles))
		for i, val := range res.Roles {
			body.Roles[i] = marshalUserserviceviewsUserroleresultViewToUserroleresultResponseBody(val)
		}
	}
	return body
}

// NewUpdateUsernameResponseBody builds the HTTP response body from the result
// of the "updateUsername" endpoint of the "user_service" service.
func NewUpdateUsernameResponseBody(res *userserviceviews.UserresultView) *UpdateUsernameResponseBody {
	body := &UpdateUsernameResponseBody{
		ID:           res.ID,
		Email:        res.Email,
		Name:         res.Name,
		IsVerified:   res.IsVerified,
		IsActive:     res.IsActive,
		HasAgreed:    res.HasAgreed,
		AccessToken:  res.AccessToken,
		RefreshToken: res.RefreshToken,
	}
	if res.Roles != nil {
		body.Roles = make([]*UserroleresultResponseBody, len(res.Roles))
		for i, val := range res.Roles {
			body.Roles[i] = marshalUserserviceviewsUserroleresultViewToUserroleresultResponseBody(val)
		}
	}
	return body
}

// NewVerifyPasswordResetTokenResponseBody builds the HTTP response body from
// the result of the "verifyPasswordResetToken" endpoint of the "user_service"
// service.
func NewVerifyPasswordResetTokenResponseBody(res *userserviceviews.UserresultView) *VerifyPasswordResetTokenResponseBody {
	body := &VerifyPasswordResetTokenResponseBody{
		ID:           res.ID,
		Email:        res.Email,
		Name:         res.Name,
		IsVerified:   res.IsVerified,
		IsActive:     res.IsActive,
		HasAgreed:    res.HasAgreed,
		AccessToken:  res.AccessToken,
		RefreshToken: res.RefreshToken,
	}
	if res.Roles != nil {
		body.Roles = make([]*UserroleresultResponseBody, len(res.Roles))
		for i, val := range res.Roles {
			body.Roles[i] = marshalUserserviceviewsUserroleresultViewToUserroleresultResponseBody(val)
		}
	}
	return body
}

// NewResetPasswordResponseBody builds the HTTP response body from the result
// of the "resetPassword" endpoint of the "user_service" service.
func NewResetPasswordResponseBody(res *userserviceviews.UserresultView) *ResetPasswordResponseBody {
	body := &ResetPasswordResponseBody{
		ID:           res.ID,
		Email:        res.Email,
		Name:         res.Name,
		IsVerified:   res.IsVerified,
		IsActive:     res.IsActive,
		HasAgreed:    res.HasAgreed,
		AccessToken:  res.AccessToken,
		RefreshToken: res.RefreshToken,
	}
	if res.Roles != nil {
		body.Roles = make([]*UserroleresultResponseBody, len(res.Roles))
		for i, val := range res.Roles {
			body.Roles[i] = marshalUserserviceviewsUserroleresultViewToUserroleresultResponseBody(val)
		}
	}
	return body
}

// NewChangePasswordResponseBody builds the HTTP response body from the result
// of the "changePassword" endpoint of the "user_service" service.
func NewChangePasswordResponseBody(res *userserviceviews.UserresultView) *ChangePasswordResponseBody {
	body := &ChangePasswordResponseBody{
		ID:           res.ID,
		Email:        res.Email,
		Name:         res.Name,
		IsVerified:   res.IsVerified,
		IsActive:     res.IsActive,
		HasAgreed:    res.HasAgreed,
		AccessToken:  res.AccessToken,
		RefreshToken: res.RefreshToken,
	}
	if res.Roles != nil {
		body.Roles = make([]*UserroleresultResponseBody, len(res.Roles))
		for i, val := range res.Roles {
			body.Roles[i] = marshalUserserviceviewsUserroleresultViewToUserroleresultResponseBody(val)
		}
	}
	return body
}

// NewLoginResponseBody builds the HTTP response body from the result of the
// "login" endpoint of the "user_service" service.
func NewLoginResponseBody(res *userserviceviews.UserresultView) *LoginResponseBody {
	body := &LoginResponseBody{
		ID:           res.ID,
		Email:        res.Email,
		Name:         res.Name,
		IsVerified:   res.IsVerified,
		IsActive:     res.IsActive,
		HasAgreed:    res.HasAgreed,
		AccessToken:  res.AccessToken,
		RefreshToken: res.RefreshToken,
	}
	if res.Roles != nil {
		body.Roles = make([]*UserroleresultResponseBody, len(res.Roles))
		for i, val := range res.Roles {
			body.Roles[i] = marshalUserserviceviewsUserroleresultViewToUserroleresultResponseBody(val)
		}
	}
	return body
}

// NewRefreshAccessTokenResponseBody builds the HTTP response body from the
// result of the "refreshAccessToken" endpoint of the "user_service" service.
func NewRefreshAccessTokenResponseBody(res *userserviceviews.UserresultView) *RefreshAccessTokenResponseBody {
	body := &RefreshAccessTokenResponseBody{
		ID:           res.ID,
		Email:        res.Email,
		Name:         res.Name,
		IsVerified:   res.IsVerified,
		IsActive:     res.IsActive,
		HasAgreed:    res.HasAgreed,
		AccessToken:  res.AccessToken,
		RefreshToken: res.RefreshToken,
	}
	if res.Roles != nil {
		body.Roles = make([]*UserroleresultResponseBody, len(res.Roles))
		for i, val := range res.Roles {
			body.Roles[i] = marshalUserserviceviewsUserroleresultViewToUserroleresultResponseBody(val)
		}
	}
	return body
}

// NewLogoutResponseBody builds the HTTP response body from the result of the
// "logout" endpoint of the "user_service" service.
func NewLogoutResponseBody(res *userservice.MessageResult) *LogoutResponseBody {
	body := &LogoutResponseBody{
		Type: res.Type,
		Desc: res.Desc,
	}
	return body
}

// NewListUsersResponseBody builds the HTTP response body from the result of
// the "listUsers" endpoint of the "user_service" service.
func NewListUsersResponseBody(res *userservice.ListUsersResult) *ListUsersResponseBody {
	body := &ListUsersResponseBody{}
	if res.Results != nil {
		body.Results = make([]*UserresultResponseBody, len(res.Results))
		for i, val := range res.Results {
			body.Results[i] = marshalUserserviceUserresultToUserresultResponseBody(val)
		}
	}
	if res.PageInfo != nil {
		body.PageInfo = marshalUserservicePageinfoToPageinfoResponseBody(res.PageInfo)
	}
	return body
}

// NewSignupNotFoundResponseBody builds the HTTP response body from the result
// of the "signup" endpoint of the "user_service" service.
func NewSignupNotFoundResponseBody(res *goa.ServiceError) *SignupNotFoundResponseBody {
	body := &SignupNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSignupBadRequestResponseBody builds the HTTP response body from the
// result of the "signup" endpoint of the "user_service" service.
func NewSignupBadRequestResponseBody(res *goa.ServiceError) *SignupBadRequestResponseBody {
	body := &SignupBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewVerifyConfirmationTokenNotFoundResponseBody builds the HTTP response body
// from the result of the "verifyConfirmationToken" endpoint of the
// "user_service" service.
func NewVerifyConfirmationTokenNotFoundResponseBody(res *goa.ServiceError) *VerifyConfirmationTokenNotFoundResponseBody {
	body := &VerifyConfirmationTokenNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewVerifyConfirmationTokenBadRequestResponseBody builds the HTTP response
// body from the result of the "verifyConfirmationToken" endpoint of the
// "user_service" service.
func NewVerifyConfirmationTokenBadRequestResponseBody(res *goa.ServiceError) *VerifyConfirmationTokenBadRequestResponseBody {
	body := &VerifyConfirmationTokenBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateUsernameNotFoundResponseBody builds the HTTP response body from the
// result of the "updateUsername" endpoint of the "user_service" service.
func NewUpdateUsernameNotFoundResponseBody(res *goa.ServiceError) *UpdateUsernameNotFoundResponseBody {
	body := &UpdateUsernameNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateUsernameBadRequestResponseBody builds the HTTP response body from
// the result of the "updateUsername" endpoint of the "user_service" service.
func NewUpdateUsernameBadRequestResponseBody(res *goa.ServiceError) *UpdateUsernameBadRequestResponseBody {
	body := &UpdateUsernameBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewVerifyPasswordResetTokenNotFoundResponseBody builds the HTTP response
// body from the result of the "verifyPasswordResetToken" endpoint of the
// "user_service" service.
func NewVerifyPasswordResetTokenNotFoundResponseBody(res *goa.ServiceError) *VerifyPasswordResetTokenNotFoundResponseBody {
	body := &VerifyPasswordResetTokenNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewVerifyPasswordResetTokenBadRequestResponseBody builds the HTTP response
// body from the result of the "verifyPasswordResetToken" endpoint of the
// "user_service" service.
func NewVerifyPasswordResetTokenBadRequestResponseBody(res *goa.ServiceError) *VerifyPasswordResetTokenBadRequestResponseBody {
	body := &VerifyPasswordResetTokenBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewResetPasswordNotFoundResponseBody builds the HTTP response body from the
// result of the "resetPassword" endpoint of the "user_service" service.
func NewResetPasswordNotFoundResponseBody(res *goa.ServiceError) *ResetPasswordNotFoundResponseBody {
	body := &ResetPasswordNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewResetPasswordBadRequestResponseBody builds the HTTP response body from
// the result of the "resetPassword" endpoint of the "user_service" service.
func NewResetPasswordBadRequestResponseBody(res *goa.ServiceError) *ResetPasswordBadRequestResponseBody {
	body := &ResetPasswordBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewChangePasswordNotFoundResponseBody builds the HTTP response body from the
// result of the "changePassword" endpoint of the "user_service" service.
func NewChangePasswordNotFoundResponseBody(res *goa.ServiceError) *ChangePasswordNotFoundResponseBody {
	body := &ChangePasswordNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewChangePasswordBadRequestResponseBody builds the HTTP response body from
// the result of the "changePassword" endpoint of the "user_service" service.
func NewChangePasswordBadRequestResponseBody(res *goa.ServiceError) *ChangePasswordBadRequestResponseBody {
	body := &ChangePasswordBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginNotFoundResponseBody builds the HTTP response body from the result
// of the "login" endpoint of the "user_service" service.
func NewLoginNotFoundResponseBody(res *goa.ServiceError) *LoginNotFoundResponseBody {
	body := &LoginNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginBadRequestResponseBody builds the HTTP response body from the result
// of the "login" endpoint of the "user_service" service.
func NewLoginBadRequestResponseBody(res *goa.ServiceError) *LoginBadRequestResponseBody {
	body := &LoginBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRefreshAccessTokenNotFoundResponseBody builds the HTTP response body from
// the result of the "refreshAccessToken" endpoint of the "user_service"
// service.
func NewRefreshAccessTokenNotFoundResponseBody(res *goa.ServiceError) *RefreshAccessTokenNotFoundResponseBody {
	body := &RefreshAccessTokenNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRefreshAccessTokenBadRequestResponseBody builds the HTTP response body
// from the result of the "refreshAccessToken" endpoint of the "user_service"
// service.
func NewRefreshAccessTokenBadRequestResponseBody(res *goa.ServiceError) *RefreshAccessTokenBadRequestResponseBody {
	body := &RefreshAccessTokenBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLogoutNotFoundResponseBody builds the HTTP response body from the result
// of the "logout" endpoint of the "user_service" service.
func NewLogoutNotFoundResponseBody(res *goa.ServiceError) *LogoutNotFoundResponseBody {
	body := &LogoutNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLogoutBadRequestResponseBody builds the HTTP response body from the
// result of the "logout" endpoint of the "user_service" service.
func NewLogoutBadRequestResponseBody(res *goa.ServiceError) *LogoutBadRequestResponseBody {
	body := &LogoutBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListUsersNotFoundResponseBody builds the HTTP response body from the
// result of the "listUsers" endpoint of the "user_service" service.
func NewListUsersNotFoundResponseBody(res *goa.ServiceError) *ListUsersNotFoundResponseBody {
	body := &ListUsersNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListUsersBadRequestResponseBody builds the HTTP response body from the
// result of the "listUsers" endpoint of the "user_service" service.
func NewListUsersBadRequestResponseBody(res *goa.ServiceError) *ListUsersBadRequestResponseBody {
	body := &ListUsersBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSignupPayload builds a user_service service signup endpoint payload.
func NewSignupPayload(body *SignupRequestBody, tenant string) *userservice.SignupPayload {
	v := &userservice.SignupPayload{
		Email: *body.Email,
	}
	v.Tenant = &tenant

	return v
}

// NewVerifyConfirmationTokenPayload builds a user_service service
// verifyConfirmationToken endpoint payload.
func NewVerifyConfirmationTokenPayload(body *VerifyConfirmationTokenRequestBody, tenant string) *userservice.VerifyConfirmationTokenPayload {
	v := &userservice.VerifyConfirmationTokenPayload{
		UserID:            *body.UserID,
		ConfirmationToken: *body.ConfirmationToken,
	}
	v.Tenant = &tenant

	return v
}

// NewUpdateUsernamePayload builds a user_service service updateUsername
// endpoint payload.
func NewUpdateUsernamePayload(body *UpdateUsernameRequestBody, tenant string, token string) *userservice.UpdateUsernamePayload {
	v := &userservice.UpdateUsernamePayload{
		Name: *body.Name,
	}
	v.Tenant = &tenant
	v.Token = token

	return v
}

// NewVerifyPasswordResetTokenPayload builds a user_service service
// verifyPasswordResetToken endpoint payload.
func NewVerifyPasswordResetTokenPayload(body *VerifyPasswordResetTokenRequestBody, tenant string) *userservice.VerifyPasswordResetTokenPayload {
	v := &userservice.VerifyPasswordResetTokenPayload{
		UserID:             *body.UserID,
		PasswordResetToken: *body.PasswordResetToken,
	}
	v.Tenant = &tenant

	return v
}

// NewResetPasswordPayload builds a user_service service resetPassword endpoint
// payload.
func NewResetPasswordPayload(body *ResetPasswordRequestBody, tenant string) *userservice.ResetPasswordPayload {
	v := &userservice.ResetPasswordPayload{
		Email: *body.Email,
	}
	v.Tenant = &tenant

	return v
}

// NewChangePasswordPayload builds a user_service service changePassword
// endpoint payload.
func NewChangePasswordPayload(body *ChangePasswordRequestBody, tenant string, token string) *userservice.ChangePasswordPayload {
	v := &userservice.ChangePasswordPayload{
		Password: *body.Password,
	}
	v.Tenant = &tenant
	v.Token = token

	return v
}

// NewLoginPayload builds a user_service service login endpoint payload.
func NewLoginPayload(body *LoginRequestBody, tenant string) *userservice.LoginPayload {
	v := &userservice.LoginPayload{
		Email:    *body.Email,
		Password: *body.Password,
	}
	v.Tenant = &tenant

	return v
}

// NewRefreshAccessTokenPayload builds a user_service service
// refreshAccessToken endpoint payload.
func NewRefreshAccessTokenPayload(tenant string, token string) *userservice.RefreshAccessTokenPayload {
	v := &userservice.RefreshAccessTokenPayload{}
	v.Tenant = &tenant
	v.Token = token

	return v
}

// NewLogoutPayload builds a user_service service logout endpoint payload.
func NewLogoutPayload(tenant string, token string) *userservice.LogoutPayload {
	v := &userservice.LogoutPayload{}
	v.Tenant = &tenant
	v.Token = token

	return v
}

// NewListUsersPayload builds a user_service service listUsers endpoint payload.
func NewListUsersPayload(body *ListUsersRequestBody, tenant string, token string) *userservice.ListUsersPayload {
	v := &userservice.ListUsersPayload{
		Email:        body.Email,
		MobileNumber: body.MobileNumber,
		Name:         body.Name,
		IsActive:     body.IsActive,
		IsVerified:   body.IsVerified,
		HasAgreed:    body.HasAgreed,
		Role:         body.Role,
		PageNumber:   body.PageNumber,
		PageSize:     body.PageSize,
	}
	v.Tenant = &tenant
	v.Token = token

	return v
}

// ValidateSignupRequestBody runs the validations defined on SignupRequestBody
func ValidateSignupRequestBody(body *SignupRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	return
}

// ValidateVerifyConfirmationTokenRequestBody runs the validations defined on
// VerifyConfirmationTokenRequestBody
func ValidateVerifyConfirmationTokenRequestBody(body *VerifyConfirmationTokenRequestBody) (err error) {
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userId", "body"))
	}
	if body.ConfirmationToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("confirmationToken", "body"))
	}
	return
}

// ValidateUpdateUsernameRequestBody runs the validations defined on
// UpdateUsernameRequestBody
func ValidateUpdateUsernameRequestBody(body *UpdateUsernameRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateVerifyPasswordResetTokenRequestBody runs the validations defined on
// VerifyPasswordResetTokenRequestBody
func ValidateVerifyPasswordResetTokenRequestBody(body *VerifyPasswordResetTokenRequestBody) (err error) {
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userId", "body"))
	}
	if body.PasswordResetToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("passwordResetToken", "body"))
	}
	return
}

// ValidateResetPasswordRequestBody runs the validations defined on
// ResetPasswordRequestBody
func ValidateResetPasswordRequestBody(body *ResetPasswordRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	return
}

// ValidateChangePasswordRequestBody runs the validations defined on
// ChangePasswordRequestBody
func ValidateChangePasswordRequestBody(body *ChangePasswordRequestBody) (err error) {
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	return
}

// ValidateLoginRequestBody runs the validations defined on LoginRequestBody
func ValidateLoginRequestBody(body *LoginRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	return
}
