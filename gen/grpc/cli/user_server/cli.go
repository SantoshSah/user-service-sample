// Code generated by goa v3.2.4, DO NOT EDIT.
//
// user_server gRPC client CLI support package
//
// Command:
// $ goa gen github.com/SantoshSah/user-service-sample/design

package cli

import (
	"flag"
	"fmt"
	"os"

	userservicec "github.com/SantoshSah/user-service-sample/gen/grpc/user_service/client"
	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `user-service (signup|verify-confirmation-token|update-username|verify-password-reset-token|reset-password|change-password|login|refresh-access-token|logout|list-users)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` user-service signup --message '{
      "email": "Qui aspernatur aliquid illum qui est.",
      "tenant": "Ut recusandae."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, interface{}, error) {
	var (
		userServiceFlags = flag.NewFlagSet("user-service", flag.ContinueOnError)

		userServiceSignupFlags       = flag.NewFlagSet("signup", flag.ExitOnError)
		userServiceSignupMessageFlag = userServiceSignupFlags.String("message", "", "")

		userServiceVerifyConfirmationTokenFlags       = flag.NewFlagSet("verify-confirmation-token", flag.ExitOnError)
		userServiceVerifyConfirmationTokenMessageFlag = userServiceVerifyConfirmationTokenFlags.String("message", "", "")

		userServiceUpdateUsernameFlags       = flag.NewFlagSet("update-username", flag.ExitOnError)
		userServiceUpdateUsernameMessageFlag = userServiceUpdateUsernameFlags.String("message", "", "")
		userServiceUpdateUsernameTokenFlag   = userServiceUpdateUsernameFlags.String("token", "REQUIRED", "")

		userServiceVerifyPasswordResetTokenFlags       = flag.NewFlagSet("verify-password-reset-token", flag.ExitOnError)
		userServiceVerifyPasswordResetTokenMessageFlag = userServiceVerifyPasswordResetTokenFlags.String("message", "", "")

		userServiceResetPasswordFlags       = flag.NewFlagSet("reset-password", flag.ExitOnError)
		userServiceResetPasswordMessageFlag = userServiceResetPasswordFlags.String("message", "", "")

		userServiceChangePasswordFlags       = flag.NewFlagSet("change-password", flag.ExitOnError)
		userServiceChangePasswordMessageFlag = userServiceChangePasswordFlags.String("message", "", "")
		userServiceChangePasswordTokenFlag   = userServiceChangePasswordFlags.String("token", "REQUIRED", "")

		userServiceLoginFlags       = flag.NewFlagSet("login", flag.ExitOnError)
		userServiceLoginMessageFlag = userServiceLoginFlags.String("message", "", "")

		userServiceRefreshAccessTokenFlags       = flag.NewFlagSet("refresh-access-token", flag.ExitOnError)
		userServiceRefreshAccessTokenMessageFlag = userServiceRefreshAccessTokenFlags.String("message", "", "")
		userServiceRefreshAccessTokenTokenFlag   = userServiceRefreshAccessTokenFlags.String("token", "REQUIRED", "")

		userServiceLogoutFlags       = flag.NewFlagSet("logout", flag.ExitOnError)
		userServiceLogoutMessageFlag = userServiceLogoutFlags.String("message", "", "")
		userServiceLogoutTokenFlag   = userServiceLogoutFlags.String("token", "REQUIRED", "")

		userServiceListUsersFlags       = flag.NewFlagSet("list-users", flag.ExitOnError)
		userServiceListUsersMessageFlag = userServiceListUsersFlags.String("message", "", "")
		userServiceListUsersTokenFlag   = userServiceListUsersFlags.String("token", "REQUIRED", "")
	)
	userServiceFlags.Usage = userServiceUsage
	userServiceSignupFlags.Usage = userServiceSignupUsage
	userServiceVerifyConfirmationTokenFlags.Usage = userServiceVerifyConfirmationTokenUsage
	userServiceUpdateUsernameFlags.Usage = userServiceUpdateUsernameUsage
	userServiceVerifyPasswordResetTokenFlags.Usage = userServiceVerifyPasswordResetTokenUsage
	userServiceResetPasswordFlags.Usage = userServiceResetPasswordUsage
	userServiceChangePasswordFlags.Usage = userServiceChangePasswordUsage
	userServiceLoginFlags.Usage = userServiceLoginUsage
	userServiceRefreshAccessTokenFlags.Usage = userServiceRefreshAccessTokenUsage
	userServiceLogoutFlags.Usage = userServiceLogoutUsage
	userServiceListUsersFlags.Usage = userServiceListUsersUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "user-service":
			svcf = userServiceFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "user-service":
			switch epn {
			case "signup":
				epf = userServiceSignupFlags

			case "verify-confirmation-token":
				epf = userServiceVerifyConfirmationTokenFlags

			case "update-username":
				epf = userServiceUpdateUsernameFlags

			case "verify-password-reset-token":
				epf = userServiceVerifyPasswordResetTokenFlags

			case "reset-password":
				epf = userServiceResetPasswordFlags

			case "change-password":
				epf = userServiceChangePasswordFlags

			case "login":
				epf = userServiceLoginFlags

			case "refresh-access-token":
				epf = userServiceRefreshAccessTokenFlags

			case "logout":
				epf = userServiceLogoutFlags

			case "list-users":
				epf = userServiceListUsersFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "user-service":
			c := userservicec.NewClient(cc, opts...)
			switch epn {
			case "signup":
				endpoint = c.Signup()
				data, err = userservicec.BuildSignupPayload(*userServiceSignupMessageFlag)
			case "verify-confirmation-token":
				endpoint = c.VerifyConfirmationToken()
				data, err = userservicec.BuildVerifyConfirmationTokenPayload(*userServiceVerifyConfirmationTokenMessageFlag)
			case "update-username":
				endpoint = c.UpdateUsername()
				data, err = userservicec.BuildUpdateUsernamePayload(*userServiceUpdateUsernameMessageFlag, *userServiceUpdateUsernameTokenFlag)
			case "verify-password-reset-token":
				endpoint = c.VerifyPasswordResetToken()
				data, err = userservicec.BuildVerifyPasswordResetTokenPayload(*userServiceVerifyPasswordResetTokenMessageFlag)
			case "reset-password":
				endpoint = c.ResetPassword()
				data, err = userservicec.BuildResetPasswordPayload(*userServiceResetPasswordMessageFlag)
			case "change-password":
				endpoint = c.ChangePassword()
				data, err = userservicec.BuildChangePasswordPayload(*userServiceChangePasswordMessageFlag, *userServiceChangePasswordTokenFlag)
			case "login":
				endpoint = c.Login()
				data, err = userservicec.BuildLoginPayload(*userServiceLoginMessageFlag)
			case "refresh-access-token":
				endpoint = c.RefreshAccessToken()
				data, err = userservicec.BuildRefreshAccessTokenPayload(*userServiceRefreshAccessTokenMessageFlag, *userServiceRefreshAccessTokenTokenFlag)
			case "logout":
				endpoint = c.Logout()
				data, err = userservicec.BuildLogoutPayload(*userServiceLogoutMessageFlag, *userServiceLogoutTokenFlag)
			case "list-users":
				endpoint = c.ListUsers()
				data, err = userservicec.BuildListUsersPayload(*userServiceListUsersMessageFlag, *userServiceListUsersTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// user-serviceUsage displays the usage of the user-service command and its
// subcommands.
func userServiceUsage() {
	fmt.Fprintf(os.Stderr, `The user service manages users.
Usage:
    %s [globalflags] user-service COMMAND [flags]

COMMAND:
    signup: Signup implements signup.
    verify-confirmation-token: VerifyConfirmationToken implements verifyConfirmationToken.
    update-username: UpdateUsername implements updateUsername.
    verify-password-reset-token: VerifyPasswordResetToken implements verifyPasswordResetToken.
    reset-password: ResetPassword implements resetPassword.
    change-password: ChangePassword implements changePassword.
    login: Login implements login.
    refresh-access-token: RefreshAccessToken implements refreshAccessToken.
    logout: Logout implements logout.
    list-users: ListUsers implements listUsers.

Additional help:
    %s user-service COMMAND --help
`, os.Args[0], os.Args[0])
}
func userServiceSignupUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user-service signup -message JSON

Signup implements signup.
    -message JSON: 

Example:
    `+os.Args[0]+` user-service signup --message '{
      "email": "Qui aspernatur aliquid illum qui est.",
      "tenant": "Ut recusandae."
   }'
`, os.Args[0])
}

func userServiceVerifyConfirmationTokenUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user-service verify-confirmation-token -message JSON

VerifyConfirmationToken implements verifyConfirmationToken.
    -message JSON: 

Example:
    `+os.Args[0]+` user-service verify-confirmation-token --message '{
      "confirmationToken": 3893034289315717293,
      "tenant": "Sit similique reiciendis.",
      "userId": "Quo praesentium quidem possimus."
   }'
`, os.Args[0])
}

func userServiceUpdateUsernameUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user-service update-username -message JSON -token STRING

UpdateUsername implements updateUsername.
    -message JSON: 
    -token STRING: 

Example:
    `+os.Args[0]+` user-service update-username --message '{
      "name": "Aperiam molestias sapiente non est.",
      "tenant": "Qui vel unde id."
   }' --token "Ipsam deleniti."
`, os.Args[0])
}

func userServiceVerifyPasswordResetTokenUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user-service verify-password-reset-token -message JSON

VerifyPasswordResetToken implements verifyPasswordResetToken.
    -message JSON: 

Example:
    `+os.Args[0]+` user-service verify-password-reset-token --message '{
      "passwordResetToken": 14868537441258973258,
      "tenant": "Dolor dolorum aspernatur quam quos cum.",
      "userId": "Aut dolores ratione deserunt nisi voluptatem."
   }'
`, os.Args[0])
}

func userServiceResetPasswordUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user-service reset-password -message JSON

ResetPassword implements resetPassword.
    -message JSON: 

Example:
    `+os.Args[0]+` user-service reset-password --message '{
      "email": "Quis amet corrupti illum doloribus.",
      "tenant": "Repellat voluptatem explicabo quia officia est."
   }'
`, os.Args[0])
}

func userServiceChangePasswordUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user-service change-password -message JSON -token STRING

ChangePassword implements changePassword.
    -message JSON: 
    -token STRING: 

Example:
    `+os.Args[0]+` user-service change-password --message '{
      "password": "Quo suscipit.",
      "tenant": "Ut adipisci non."
   }' --token "Doloribus consequatur alias."
`, os.Args[0])
}

func userServiceLoginUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user-service login -message JSON

Login implements login.
    -message JSON: 

Example:
    `+os.Args[0]+` user-service login --message '{
      "email": "Consequatur et quasi quisquam occaecati et quod.",
      "password": "Dolores quam eum.",
      "tenant": "Et ut sint voluptas veritatis est."
   }'
`, os.Args[0])
}

func userServiceRefreshAccessTokenUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user-service refresh-access-token -message JSON -token STRING

RefreshAccessToken implements refreshAccessToken.
    -message JSON: 
    -token STRING: 

Example:
    `+os.Args[0]+` user-service refresh-access-token --message '{
      "tenant": "Veniam nostrum veritatis."
   }' --token "Saepe iste."
`, os.Args[0])
}

func userServiceLogoutUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user-service logout -message JSON -token STRING

Logout implements logout.
    -message JSON: 
    -token STRING: 

Example:
    `+os.Args[0]+` user-service logout --message '{
      "tenant": "Dignissimos totam."
   }' --token "Quis praesentium sed deleniti eum iure eos."
`, os.Args[0])
}

func userServiceListUsersUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user-service list-users -message JSON -token STRING

ListUsers implements listUsers.
    -message JSON: 
    -token STRING: 

Example:
    `+os.Args[0]+` user-service list-users --message '{
      "email": "Dolorem facere velit labore architecto provident.",
      "hasAgreed": "Excepturi rerum.",
      "isActive": "Veritatis sit eos ad.",
      "isVerified": "Magnam quod sunt ut quidem recusandae.",
      "mobileNumber": "Voluptas facilis amet et.",
      "name": "Assumenda hic amet beatae.",
      "pageNumber": 61737174172464830,
      "pageSize": 6024070167591937614,
      "role": "Quia molestias enim.",
      "tenant": "Quis tenetur vitae consequatur suscipit accusantium."
   }' --token "Et labore quae quo."
`, os.Args[0])
}
