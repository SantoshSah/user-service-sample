// Code generated by goa v3.2.4, DO NOT EDIT.
//
// user_service gRPC client types
//
// Command:
// $ goa gen github.com/SantoshSah/user-service-sample/design

package client

import (
	user_servicepb "github.com/SantoshSah/user-service-sample/gen/grpc/user_service/pb"
	userservice "github.com/SantoshSah/user-service-sample/gen/user_service"
	userserviceviews "github.com/SantoshSah/user-service-sample/gen/user_service/views"
)

// NewSignupRequest builds the gRPC request type from the payload of the
// "signup" endpoint of the "user_service" service.
func NewSignupRequest(payload *userservice.SignupPayload) *user_servicepb.SignupRequest {
	message := &user_servicepb.SignupRequest{
		Email: payload.Email,
	}
	if payload.Tenant != nil {
		message.Tenant = *payload.Tenant
	}
	return message
}

// NewSignupResult builds the result type of the "signup" endpoint of the
// "user_service" service from the gRPC response type.
func NewSignupResult(message *user_servicepb.SignupResponse) *userserviceviews.UserresultView {
	result := &userserviceviews.UserresultView{
		IsVerified: &message.IsVerified,
		IsActive:   &message.IsActive,
		HasAgreed:  &message.HasAgreed,
	}
	if message.Id != "" {
		result.ID = &message.Id
	}
	if message.Email != "" {
		result.Email = &message.Email
	}
	if message.Name != "" {
		result.Name = &message.Name
	}
	if message.AccessToken != "" {
		result.AccessToken = &message.AccessToken
	}
	if message.RefreshToken != "" {
		result.RefreshToken = &message.RefreshToken
	}
	if message.Roles != nil {
		result.Roles = make([]*userserviceviews.UserroleresultView, len(message.Roles.Field))
		for i, val := range message.Roles.Field {
			result.Roles[i] = &userserviceviews.UserroleresultView{
				IsActive: &val.IsActive,
			}
			if val.Id != "" {
				result.Roles[i].ID = &val.Id
			}
			if val.UserId != "" {
				result.Roles[i].UserID = &val.UserId
			}
			if val.RoleId != "" {
				result.Roles[i].RoleID = &val.RoleId
			}
			if val.Role != nil {
				result.Roles[i].Role = protobufUserServicepbRoleresultToUserserviceviewsRoleresultView(val.Role)
			}
		}
	}
	return result
}

// NewVerifyConfirmationTokenRequest builds the gRPC request type from the
// payload of the "verifyConfirmationToken" endpoint of the "user_service"
// service.
func NewVerifyConfirmationTokenRequest(payload *userservice.VerifyConfirmationTokenPayload) *user_servicepb.VerifyConfirmationTokenRequest {
	message := &user_servicepb.VerifyConfirmationTokenRequest{
		UserId:            payload.UserID,
		ConfirmationToken: payload.ConfirmationToken,
	}
	if payload.Tenant != nil {
		message.Tenant = *payload.Tenant
	}
	return message
}

// NewVerifyConfirmationTokenResult builds the result type of the
// "verifyConfirmationToken" endpoint of the "user_service" service from the
// gRPC response type.
func NewVerifyConfirmationTokenResult(message *user_servicepb.VerifyConfirmationTokenResponse) *userserviceviews.UserresultView {
	result := &userserviceviews.UserresultView{
		IsVerified: &message.IsVerified,
		IsActive:   &message.IsActive,
		HasAgreed:  &message.HasAgreed,
	}
	if message.Id != "" {
		result.ID = &message.Id
	}
	if message.Email != "" {
		result.Email = &message.Email
	}
	if message.Name != "" {
		result.Name = &message.Name
	}
	if message.AccessToken != "" {
		result.AccessToken = &message.AccessToken
	}
	if message.RefreshToken != "" {
		result.RefreshToken = &message.RefreshToken
	}
	if message.Roles != nil {
		result.Roles = make([]*userserviceviews.UserroleresultView, len(message.Roles.Field))
		for i, val := range message.Roles.Field {
			result.Roles[i] = &userserviceviews.UserroleresultView{
				IsActive: &val.IsActive,
			}
			if val.Id != "" {
				result.Roles[i].ID = &val.Id
			}
			if val.UserId != "" {
				result.Roles[i].UserID = &val.UserId
			}
			if val.RoleId != "" {
				result.Roles[i].RoleID = &val.RoleId
			}
			if val.Role != nil {
				result.Roles[i].Role = protobufUserServicepbRoleresultToUserserviceviewsRoleresultView(val.Role)
			}
		}
	}
	return result
}

// NewUpdateUsernameRequest builds the gRPC request type from the payload of
// the "updateUsername" endpoint of the "user_service" service.
func NewUpdateUsernameRequest(payload *userservice.UpdateUsernamePayload) *user_servicepb.UpdateUsernameRequest {
	message := &user_servicepb.UpdateUsernameRequest{
		Name: payload.Name,
	}
	if payload.Tenant != nil {
		message.Tenant = *payload.Tenant
	}
	return message
}

// NewUpdateUsernameResult builds the result type of the "updateUsername"
// endpoint of the "user_service" service from the gRPC response type.
func NewUpdateUsernameResult(message *user_servicepb.UpdateUsernameResponse) *userserviceviews.UserresultView {
	result := &userserviceviews.UserresultView{
		IsVerified: &message.IsVerified,
		IsActive:   &message.IsActive,
		HasAgreed:  &message.HasAgreed,
	}
	if message.Id != "" {
		result.ID = &message.Id
	}
	if message.Email != "" {
		result.Email = &message.Email
	}
	if message.Name != "" {
		result.Name = &message.Name
	}
	if message.AccessToken != "" {
		result.AccessToken = &message.AccessToken
	}
	if message.RefreshToken != "" {
		result.RefreshToken = &message.RefreshToken
	}
	if message.Roles != nil {
		result.Roles = make([]*userserviceviews.UserroleresultView, len(message.Roles.Field))
		for i, val := range message.Roles.Field {
			result.Roles[i] = &userserviceviews.UserroleresultView{
				IsActive: &val.IsActive,
			}
			if val.Id != "" {
				result.Roles[i].ID = &val.Id
			}
			if val.UserId != "" {
				result.Roles[i].UserID = &val.UserId
			}
			if val.RoleId != "" {
				result.Roles[i].RoleID = &val.RoleId
			}
			if val.Role != nil {
				result.Roles[i].Role = protobufUserServicepbRoleresultToUserserviceviewsRoleresultView(val.Role)
			}
		}
	}
	return result
}

// NewVerifyPasswordResetTokenRequest builds the gRPC request type from the
// payload of the "verifyPasswordResetToken" endpoint of the "user_service"
// service.
func NewVerifyPasswordResetTokenRequest(payload *userservice.VerifyPasswordResetTokenPayload) *user_servicepb.VerifyPasswordResetTokenRequest {
	message := &user_servicepb.VerifyPasswordResetTokenRequest{
		UserId:             payload.UserID,
		PasswordResetToken: payload.PasswordResetToken,
	}
	if payload.Tenant != nil {
		message.Tenant = *payload.Tenant
	}
	return message
}

// NewVerifyPasswordResetTokenResult builds the result type of the
// "verifyPasswordResetToken" endpoint of the "user_service" service from the
// gRPC response type.
func NewVerifyPasswordResetTokenResult(message *user_servicepb.VerifyPasswordResetTokenResponse) *userserviceviews.UserresultView {
	result := &userserviceviews.UserresultView{
		IsVerified: &message.IsVerified,
		IsActive:   &message.IsActive,
		HasAgreed:  &message.HasAgreed,
	}
	if message.Id != "" {
		result.ID = &message.Id
	}
	if message.Email != "" {
		result.Email = &message.Email
	}
	if message.Name != "" {
		result.Name = &message.Name
	}
	if message.AccessToken != "" {
		result.AccessToken = &message.AccessToken
	}
	if message.RefreshToken != "" {
		result.RefreshToken = &message.RefreshToken
	}
	if message.Roles != nil {
		result.Roles = make([]*userserviceviews.UserroleresultView, len(message.Roles.Field))
		for i, val := range message.Roles.Field {
			result.Roles[i] = &userserviceviews.UserroleresultView{
				IsActive: &val.IsActive,
			}
			if val.Id != "" {
				result.Roles[i].ID = &val.Id
			}
			if val.UserId != "" {
				result.Roles[i].UserID = &val.UserId
			}
			if val.RoleId != "" {
				result.Roles[i].RoleID = &val.RoleId
			}
			if val.Role != nil {
				result.Roles[i].Role = protobufUserServicepbRoleresultToUserserviceviewsRoleresultView(val.Role)
			}
		}
	}
	return result
}

// NewResetPasswordRequest builds the gRPC request type from the payload of the
// "resetPassword" endpoint of the "user_service" service.
func NewResetPasswordRequest(payload *userservice.ResetPasswordPayload) *user_servicepb.ResetPasswordRequest {
	message := &user_servicepb.ResetPasswordRequest{
		Email: payload.Email,
	}
	if payload.Tenant != nil {
		message.Tenant = *payload.Tenant
	}
	return message
}

// NewResetPasswordResult builds the result type of the "resetPassword"
// endpoint of the "user_service" service from the gRPC response type.
func NewResetPasswordResult(message *user_servicepb.ResetPasswordResponse) *userserviceviews.UserresultView {
	result := &userserviceviews.UserresultView{
		IsVerified: &message.IsVerified,
		IsActive:   &message.IsActive,
		HasAgreed:  &message.HasAgreed,
	}
	if message.Id != "" {
		result.ID = &message.Id
	}
	if message.Email != "" {
		result.Email = &message.Email
	}
	if message.Name != "" {
		result.Name = &message.Name
	}
	if message.AccessToken != "" {
		result.AccessToken = &message.AccessToken
	}
	if message.RefreshToken != "" {
		result.RefreshToken = &message.RefreshToken
	}
	if message.Roles != nil {
		result.Roles = make([]*userserviceviews.UserroleresultView, len(message.Roles.Field))
		for i, val := range message.Roles.Field {
			result.Roles[i] = &userserviceviews.UserroleresultView{
				IsActive: &val.IsActive,
			}
			if val.Id != "" {
				result.Roles[i].ID = &val.Id
			}
			if val.UserId != "" {
				result.Roles[i].UserID = &val.UserId
			}
			if val.RoleId != "" {
				result.Roles[i].RoleID = &val.RoleId
			}
			if val.Role != nil {
				result.Roles[i].Role = protobufUserServicepbRoleresultToUserserviceviewsRoleresultView(val.Role)
			}
		}
	}
	return result
}

// NewChangePasswordRequest builds the gRPC request type from the payload of
// the "changePassword" endpoint of the "user_service" service.
func NewChangePasswordRequest(payload *userservice.ChangePasswordPayload) *user_servicepb.ChangePasswordRequest {
	message := &user_servicepb.ChangePasswordRequest{
		Password: payload.Password,
	}
	if payload.Tenant != nil {
		message.Tenant = *payload.Tenant
	}
	return message
}

// NewChangePasswordResult builds the result type of the "changePassword"
// endpoint of the "user_service" service from the gRPC response type.
func NewChangePasswordResult(message *user_servicepb.ChangePasswordResponse) *userserviceviews.UserresultView {
	result := &userserviceviews.UserresultView{
		IsVerified: &message.IsVerified,
		IsActive:   &message.IsActive,
		HasAgreed:  &message.HasAgreed,
	}
	if message.Id != "" {
		result.ID = &message.Id
	}
	if message.Email != "" {
		result.Email = &message.Email
	}
	if message.Name != "" {
		result.Name = &message.Name
	}
	if message.AccessToken != "" {
		result.AccessToken = &message.AccessToken
	}
	if message.RefreshToken != "" {
		result.RefreshToken = &message.RefreshToken
	}
	if message.Roles != nil {
		result.Roles = make([]*userserviceviews.UserroleresultView, len(message.Roles.Field))
		for i, val := range message.Roles.Field {
			result.Roles[i] = &userserviceviews.UserroleresultView{
				IsActive: &val.IsActive,
			}
			if val.Id != "" {
				result.Roles[i].ID = &val.Id
			}
			if val.UserId != "" {
				result.Roles[i].UserID = &val.UserId
			}
			if val.RoleId != "" {
				result.Roles[i].RoleID = &val.RoleId
			}
			if val.Role != nil {
				result.Roles[i].Role = protobufUserServicepbRoleresultToUserserviceviewsRoleresultView(val.Role)
			}
		}
	}
	return result
}

// NewLoginRequest builds the gRPC request type from the payload of the "login"
// endpoint of the "user_service" service.
func NewLoginRequest(payload *userservice.LoginPayload) *user_servicepb.LoginRequest {
	message := &user_servicepb.LoginRequest{
		Email:    payload.Email,
		Password: payload.Password,
	}
	if payload.Tenant != nil {
		message.Tenant = *payload.Tenant
	}
	return message
}

// NewLoginResult builds the result type of the "login" endpoint of the
// "user_service" service from the gRPC response type.
func NewLoginResult(message *user_servicepb.LoginResponse) *userserviceviews.UserresultView {
	result := &userserviceviews.UserresultView{
		IsVerified: &message.IsVerified,
		IsActive:   &message.IsActive,
		HasAgreed:  &message.HasAgreed,
	}
	if message.Id != "" {
		result.ID = &message.Id
	}
	if message.Email != "" {
		result.Email = &message.Email
	}
	if message.Name != "" {
		result.Name = &message.Name
	}
	if message.AccessToken != "" {
		result.AccessToken = &message.AccessToken
	}
	if message.RefreshToken != "" {
		result.RefreshToken = &message.RefreshToken
	}
	if message.Roles != nil {
		result.Roles = make([]*userserviceviews.UserroleresultView, len(message.Roles.Field))
		for i, val := range message.Roles.Field {
			result.Roles[i] = &userserviceviews.UserroleresultView{
				IsActive: &val.IsActive,
			}
			if val.Id != "" {
				result.Roles[i].ID = &val.Id
			}
			if val.UserId != "" {
				result.Roles[i].UserID = &val.UserId
			}
			if val.RoleId != "" {
				result.Roles[i].RoleID = &val.RoleId
			}
			if val.Role != nil {
				result.Roles[i].Role = protobufUserServicepbRoleresultToUserserviceviewsRoleresultView(val.Role)
			}
		}
	}
	return result
}

// NewRefreshAccessTokenRequest builds the gRPC request type from the payload
// of the "refreshAccessToken" endpoint of the "user_service" service.
func NewRefreshAccessTokenRequest(payload *userservice.RefreshAccessTokenPayload) *user_servicepb.RefreshAccessTokenRequest {
	message := &user_servicepb.RefreshAccessTokenRequest{}
	if payload.Tenant != nil {
		message.Tenant = *payload.Tenant
	}
	return message
}

// NewRefreshAccessTokenResult builds the result type of the
// "refreshAccessToken" endpoint of the "user_service" service from the gRPC
// response type.
func NewRefreshAccessTokenResult(message *user_servicepb.RefreshAccessTokenResponse) *userserviceviews.UserresultView {
	result := &userserviceviews.UserresultView{
		IsVerified: &message.IsVerified,
		IsActive:   &message.IsActive,
		HasAgreed:  &message.HasAgreed,
	}
	if message.Id != "" {
		result.ID = &message.Id
	}
	if message.Email != "" {
		result.Email = &message.Email
	}
	if message.Name != "" {
		result.Name = &message.Name
	}
	if message.AccessToken != "" {
		result.AccessToken = &message.AccessToken
	}
	if message.RefreshToken != "" {
		result.RefreshToken = &message.RefreshToken
	}
	if message.Roles != nil {
		result.Roles = make([]*userserviceviews.UserroleresultView, len(message.Roles.Field))
		for i, val := range message.Roles.Field {
			result.Roles[i] = &userserviceviews.UserroleresultView{
				IsActive: &val.IsActive,
			}
			if val.Id != "" {
				result.Roles[i].ID = &val.Id
			}
			if val.UserId != "" {
				result.Roles[i].UserID = &val.UserId
			}
			if val.RoleId != "" {
				result.Roles[i].RoleID = &val.RoleId
			}
			if val.Role != nil {
				result.Roles[i].Role = protobufUserServicepbRoleresultToUserserviceviewsRoleresultView(val.Role)
			}
		}
	}
	return result
}

// NewLogoutRequest builds the gRPC request type from the payload of the
// "logout" endpoint of the "user_service" service.
func NewLogoutRequest(payload *userservice.LogoutPayload) *user_servicepb.LogoutRequest {
	message := &user_servicepb.LogoutRequest{}
	if payload.Tenant != nil {
		message.Tenant = *payload.Tenant
	}
	return message
}

// NewLogoutResult builds the result type of the "logout" endpoint of the
// "user_service" service from the gRPC response type.
func NewLogoutResult(message *user_servicepb.LogoutResponse) *userservice.MessageResult {
	result := &userservice.MessageResult{}
	if message.Type != "" {
		result.Type = &message.Type
	}
	if message.Desc != "" {
		result.Desc = &message.Desc
	}
	return result
}

// NewListUsersRequest builds the gRPC request type from the payload of the
// "listUsers" endpoint of the "user_service" service.
func NewListUsersRequest(payload *userservice.ListUsersPayload) *user_servicepb.ListUsersRequest {
	message := &user_servicepb.ListUsersRequest{}
	if payload.Email != nil {
		message.Email = *payload.Email
	}
	if payload.MobileNumber != nil {
		message.MobileNumber = *payload.MobileNumber
	}
	if payload.Name != nil {
		message.Name = *payload.Name
	}
	if payload.IsActive != nil {
		message.IsActive = *payload.IsActive
	}
	if payload.IsVerified != nil {
		message.IsVerified = *payload.IsVerified
	}
	if payload.HasAgreed != nil {
		message.HasAgreed = *payload.HasAgreed
	}
	if payload.Role != nil {
		message.Role = *payload.Role
	}
	if payload.PageNumber != nil {
		message.PageNumber = int32(*payload.PageNumber)
	}
	if payload.PageSize != nil {
		message.PageSize = int32(*payload.PageSize)
	}
	if payload.Tenant != nil {
		message.Tenant = *payload.Tenant
	}
	return message
}

// NewListUsersResult builds the result type of the "listUsers" endpoint of the
// "user_service" service from the gRPC response type.
func NewListUsersResult(message *user_servicepb.ListUsersResponse) *userservice.ListUsersResult {
	result := &userservice.ListUsersResult{}
	if message.Results != nil {
		result.Results = make([]*userservice.Userresult, len(message.Results.Field))
		for i, val := range message.Results.Field {
			result.Results[i] = &userservice.Userresult{
				IsVerified: &val.IsVerified,
				IsActive:   &val.IsActive,
				HasAgreed:  &val.HasAgreed,
			}
			if val.Id != "" {
				result.Results[i].ID = &val.Id
			}
			if val.Email != "" {
				result.Results[i].Email = &val.Email
			}
			if val.Name != "" {
				result.Results[i].Name = &val.Name
			}
			if val.AccessToken != "" {
				result.Results[i].AccessToken = &val.AccessToken
			}
			if val.RefreshToken != "" {
				result.Results[i].RefreshToken = &val.RefreshToken
			}
			if val.Roles != nil {
				result.Results[i].Roles = make([]*userservice.Userroleresult, len(val.Roles.Field))
				for j, val := range val.Roles.Field {
					result.Results[i].Roles[j] = &userservice.Userroleresult{
						IsActive: &val.IsActive,
					}
					if val.Id != "" {
						result.Results[i].Roles[j].ID = &val.Id
					}
					if val.UserId != "" {
						result.Results[i].Roles[j].UserID = &val.UserId
					}
					if val.RoleId != "" {
						result.Results[i].Roles[j].RoleID = &val.RoleId
					}
					if val.Role != nil {
						result.Results[i].Roles[j].Role = protobufUserServicepbRoleresultToUserserviceRoleresult(val.Role)
					}
				}
			}
		}
	}
	if message.PageInfo != nil {
		result.PageInfo = protobufUserServicepbPageinfoToUserservicePageinfo(message.PageInfo)
	}
	return result
}

// svcUserserviceviewsRoleresultViewToUserServicepbRoleresult builds a value of
// type *user_servicepb.Roleresult from a value of type
// *userserviceviews.RoleresultView.
func svcUserserviceviewsRoleresultViewToUserServicepbRoleresult(v *userserviceviews.RoleresultView) *user_servicepb.Roleresult {
	if v == nil {
		return nil
	}
	res := &user_servicepb.Roleresult{}
	if v.ID != nil {
		res.Id = *v.ID
	}
	if v.Name != nil {
		res.Name = *v.Name
	}
	if v.ServiceID != nil {
		res.ServiceId = *v.ServiceID
	}
	if v.IsActive != nil {
		res.IsActive = *v.IsActive
	}

	return res
}

// protobufUserServicepbRoleresultToUserserviceviewsRoleresultView builds a
// value of type *userserviceviews.RoleresultView from a value of type
// *user_servicepb.Roleresult.
func protobufUserServicepbRoleresultToUserserviceviewsRoleresultView(v *user_servicepb.Roleresult) *userserviceviews.RoleresultView {
	if v == nil {
		return nil
	}
	res := &userserviceviews.RoleresultView{
		IsActive: &v.IsActive,
	}
	if v.Id != "" {
		res.ID = &v.Id
	}
	if v.Name != "" {
		res.Name = &v.Name
	}
	if v.ServiceId != "" {
		res.ServiceID = &v.ServiceId
	}

	return res
}

// svcUserserviceRoleresultToUserServicepbRoleresult builds a value of type
// *user_servicepb.Roleresult from a value of type *userservice.Roleresult.
func svcUserserviceRoleresultToUserServicepbRoleresult(v *userservice.Roleresult) *user_servicepb.Roleresult {
	if v == nil {
		return nil
	}
	res := &user_servicepb.Roleresult{}
	if v.ID != nil {
		res.Id = *v.ID
	}
	if v.Name != nil {
		res.Name = *v.Name
	}
	if v.ServiceID != nil {
		res.ServiceId = *v.ServiceID
	}
	if v.IsActive != nil {
		res.IsActive = *v.IsActive
	}

	return res
}

// svcUserservicePageinfoToUserServicepbPageinfo builds a value of type
// *user_servicepb.Pageinfo from a value of type *userservice.Pageinfo.
func svcUserservicePageinfoToUserServicepbPageinfo(v *userservice.Pageinfo) *user_servicepb.Pageinfo {
	if v == nil {
		return nil
	}
	res := &user_servicepb.Pageinfo{}
	if v.PageNumber != nil {
		res.PageNumber = int32(*v.PageNumber)
	}
	if v.PageSize != nil {
		res.PageSize = int32(*v.PageSize)
	}
	if v.Count != nil {
		res.Count = int32(*v.Count)
	}
	if v.TotalCount != nil {
		res.TotalCount = *v.TotalCount
	}

	return res
}

// protobufUserServicepbRoleresultToUserserviceRoleresult builds a value of
// type *userservice.Roleresult from a value of type *user_servicepb.Roleresult.
func protobufUserServicepbRoleresultToUserserviceRoleresult(v *user_servicepb.Roleresult) *userservice.Roleresult {
	if v == nil {
		return nil
	}
	res := &userservice.Roleresult{
		IsActive: &v.IsActive,
	}
	if v.Id != "" {
		res.ID = &v.Id
	}
	if v.Name != "" {
		res.Name = &v.Name
	}
	if v.ServiceId != "" {
		res.ServiceID = &v.ServiceId
	}

	return res
}

// protobufUserServicepbPageinfoToUserservicePageinfo builds a value of type
// *userservice.Pageinfo from a value of type *user_servicepb.Pageinfo.
func protobufUserServicepbPageinfoToUserservicePageinfo(v *user_servicepb.Pageinfo) *userservice.Pageinfo {
	if v == nil {
		return nil
	}
	res := &userservice.Pageinfo{}
	if v.PageNumber != 0 {
		pageNumberptr := int(v.PageNumber)
		res.PageNumber = &pageNumberptr
	}
	if v.PageSize != 0 {
		pageSizeptr := int(v.PageSize)
		res.PageSize = &pageSizeptr
	}
	if v.Count != 0 {
		countptr := int(v.Count)
		res.Count = &countptr
	}
	if v.TotalCount != 0 {
		res.TotalCount = &v.TotalCount
	}

	return res
}
