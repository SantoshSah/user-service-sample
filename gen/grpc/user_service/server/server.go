// Code generated by goa v3.2.4, DO NOT EDIT.
//
// user_service gRPC server
//
// Command:
// $ goa gen github.com/SantoshSah/user-service-sample/design

package server

import (
	"context"

	user_servicepb "github.com/SantoshSah/user-service-sample/gen/grpc/user_service/pb"
	userservice "github.com/SantoshSah/user-service-sample/gen/user_service"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/codes"
)

// Server implements the user_servicepb.UserServiceServer interface.
type Server struct {
	SignupH                   goagrpc.UnaryHandler
	VerifyConfirmationTokenH  goagrpc.UnaryHandler
	UpdateUsernameH           goagrpc.UnaryHandler
	VerifyPasswordResetTokenH goagrpc.UnaryHandler
	ResetPasswordH            goagrpc.UnaryHandler
	ChangePasswordH           goagrpc.UnaryHandler
	LoginH                    goagrpc.UnaryHandler
	RefreshAccessTokenH       goagrpc.UnaryHandler
	LogoutH                   goagrpc.UnaryHandler
	ListUsersH                goagrpc.UnaryHandler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the expr.
type ErrorNamer interface {
	ErrorName() string
}

// New instantiates the server struct with the user_service service endpoints.
func New(e *userservice.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		SignupH:                   NewSignupHandler(e.Signup, uh),
		VerifyConfirmationTokenH:  NewVerifyConfirmationTokenHandler(e.VerifyConfirmationToken, uh),
		UpdateUsernameH:           NewUpdateUsernameHandler(e.UpdateUsername, uh),
		VerifyPasswordResetTokenH: NewVerifyPasswordResetTokenHandler(e.VerifyPasswordResetToken, uh),
		ResetPasswordH:            NewResetPasswordHandler(e.ResetPassword, uh),
		ChangePasswordH:           NewChangePasswordHandler(e.ChangePassword, uh),
		LoginH:                    NewLoginHandler(e.Login, uh),
		RefreshAccessTokenH:       NewRefreshAccessTokenHandler(e.RefreshAccessToken, uh),
		LogoutH:                   NewLogoutHandler(e.Logout, uh),
		ListUsersH:                NewListUsersHandler(e.ListUsers, uh),
	}
}

// NewSignupHandler creates a gRPC handler which serves the "user_service"
// service "signup" endpoint.
func NewSignupHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeSignupRequest, EncodeSignupResponse)
	}
	return h
}

// Signup implements the "Signup" method in user_servicepb.UserServiceServer
// interface.
func (s *Server) Signup(ctx context.Context, message *user_servicepb.SignupRequest) (*user_servicepb.SignupResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "signup")
	ctx = context.WithValue(ctx, goa.ServiceKey, "user_service")
	resp, err := s.SignupH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "NotFound":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			case "BadRequest":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*user_servicepb.SignupResponse), nil
}

// NewVerifyConfirmationTokenHandler creates a gRPC handler which serves the
// "user_service" service "verifyConfirmationToken" endpoint.
func NewVerifyConfirmationTokenHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeVerifyConfirmationTokenRequest, EncodeVerifyConfirmationTokenResponse)
	}
	return h
}

// VerifyConfirmationToken implements the "VerifyConfirmationToken" method in
// user_servicepb.UserServiceServer interface.
func (s *Server) VerifyConfirmationToken(ctx context.Context, message *user_servicepb.VerifyConfirmationTokenRequest) (*user_servicepb.VerifyConfirmationTokenResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "verifyConfirmationToken")
	ctx = context.WithValue(ctx, goa.ServiceKey, "user_service")
	resp, err := s.VerifyConfirmationTokenH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "NotFound":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			case "BadRequest":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*user_servicepb.VerifyConfirmationTokenResponse), nil
}

// NewUpdateUsernameHandler creates a gRPC handler which serves the
// "user_service" service "updateUsername" endpoint.
func NewUpdateUsernameHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeUpdateUsernameRequest, EncodeUpdateUsernameResponse)
	}
	return h
}

// UpdateUsername implements the "UpdateUsername" method in
// user_servicepb.UserServiceServer interface.
func (s *Server) UpdateUsername(ctx context.Context, message *user_servicepb.UpdateUsernameRequest) (*user_servicepb.UpdateUsernameResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "updateUsername")
	ctx = context.WithValue(ctx, goa.ServiceKey, "user_service")
	resp, err := s.UpdateUsernameH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "NotFound":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			case "BadRequest":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*user_servicepb.UpdateUsernameResponse), nil
}

// NewVerifyPasswordResetTokenHandler creates a gRPC handler which serves the
// "user_service" service "verifyPasswordResetToken" endpoint.
func NewVerifyPasswordResetTokenHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeVerifyPasswordResetTokenRequest, EncodeVerifyPasswordResetTokenResponse)
	}
	return h
}

// VerifyPasswordResetToken implements the "VerifyPasswordResetToken" method in
// user_servicepb.UserServiceServer interface.
func (s *Server) VerifyPasswordResetToken(ctx context.Context, message *user_servicepb.VerifyPasswordResetTokenRequest) (*user_servicepb.VerifyPasswordResetTokenResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "verifyPasswordResetToken")
	ctx = context.WithValue(ctx, goa.ServiceKey, "user_service")
	resp, err := s.VerifyPasswordResetTokenH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "NotFound":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			case "BadRequest":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*user_servicepb.VerifyPasswordResetTokenResponse), nil
}

// NewResetPasswordHandler creates a gRPC handler which serves the
// "user_service" service "resetPassword" endpoint.
func NewResetPasswordHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeResetPasswordRequest, EncodeResetPasswordResponse)
	}
	return h
}

// ResetPassword implements the "ResetPassword" method in
// user_servicepb.UserServiceServer interface.
func (s *Server) ResetPassword(ctx context.Context, message *user_servicepb.ResetPasswordRequest) (*user_servicepb.ResetPasswordResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "resetPassword")
	ctx = context.WithValue(ctx, goa.ServiceKey, "user_service")
	resp, err := s.ResetPasswordH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "NotFound":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			case "BadRequest":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*user_servicepb.ResetPasswordResponse), nil
}

// NewChangePasswordHandler creates a gRPC handler which serves the
// "user_service" service "changePassword" endpoint.
func NewChangePasswordHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeChangePasswordRequest, EncodeChangePasswordResponse)
	}
	return h
}

// ChangePassword implements the "ChangePassword" method in
// user_servicepb.UserServiceServer interface.
func (s *Server) ChangePassword(ctx context.Context, message *user_servicepb.ChangePasswordRequest) (*user_servicepb.ChangePasswordResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "changePassword")
	ctx = context.WithValue(ctx, goa.ServiceKey, "user_service")
	resp, err := s.ChangePasswordH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "NotFound":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			case "BadRequest":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*user_servicepb.ChangePasswordResponse), nil
}

// NewLoginHandler creates a gRPC handler which serves the "user_service"
// service "login" endpoint.
func NewLoginHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeLoginRequest, EncodeLoginResponse)
	}
	return h
}

// Login implements the "Login" method in user_servicepb.UserServiceServer
// interface.
func (s *Server) Login(ctx context.Context, message *user_servicepb.LoginRequest) (*user_servicepb.LoginResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "login")
	ctx = context.WithValue(ctx, goa.ServiceKey, "user_service")
	resp, err := s.LoginH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "NotFound":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			case "BadRequest":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*user_servicepb.LoginResponse), nil
}

// NewRefreshAccessTokenHandler creates a gRPC handler which serves the
// "user_service" service "refreshAccessToken" endpoint.
func NewRefreshAccessTokenHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeRefreshAccessTokenRequest, EncodeRefreshAccessTokenResponse)
	}
	return h
}

// RefreshAccessToken implements the "RefreshAccessToken" method in
// user_servicepb.UserServiceServer interface.
func (s *Server) RefreshAccessToken(ctx context.Context, message *user_servicepb.RefreshAccessTokenRequest) (*user_servicepb.RefreshAccessTokenResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "refreshAccessToken")
	ctx = context.WithValue(ctx, goa.ServiceKey, "user_service")
	resp, err := s.RefreshAccessTokenH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "NotFound":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			case "BadRequest":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*user_servicepb.RefreshAccessTokenResponse), nil
}

// NewLogoutHandler creates a gRPC handler which serves the "user_service"
// service "logout" endpoint.
func NewLogoutHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeLogoutRequest, EncodeLogoutResponse)
	}
	return h
}

// Logout implements the "Logout" method in user_servicepb.UserServiceServer
// interface.
func (s *Server) Logout(ctx context.Context, message *user_servicepb.LogoutRequest) (*user_servicepb.LogoutResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "logout")
	ctx = context.WithValue(ctx, goa.ServiceKey, "user_service")
	resp, err := s.LogoutH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "NotFound":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			case "BadRequest":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*user_servicepb.LogoutResponse), nil
}

// NewListUsersHandler creates a gRPC handler which serves the "user_service"
// service "listUsers" endpoint.
func NewListUsersHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeListUsersRequest, EncodeListUsersResponse)
	}
	return h
}

// ListUsers implements the "ListUsers" method in
// user_servicepb.UserServiceServer interface.
func (s *Server) ListUsers(ctx context.Context, message *user_servicepb.ListUsersRequest) (*user_servicepb.ListUsersResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "listUsers")
	ctx = context.WithValue(ctx, goa.ServiceKey, "user_service")
	resp, err := s.ListUsersH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "NotFound":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			case "BadRequest":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*user_servicepb.ListUsersResponse), nil
}
