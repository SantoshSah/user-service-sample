// Code generated by goa v3.2.4, DO NOT EDIT.
//
// user_service gRPC server types
//
// Command:
// $ goa gen github.com/SantoshSah/user-service-sample/design

package server

import (
	user_servicepb "github.com/SantoshSah/user-service-sample/gen/grpc/user_service/pb"
	userservice "github.com/SantoshSah/user-service-sample/gen/user_service"
	userserviceviews "github.com/SantoshSah/user-service-sample/gen/user_service/views"
)

// NewSignupPayload builds the payload of the "signup" endpoint of the
// "user_service" service from the gRPC request type.
func NewSignupPayload(message *user_servicepb.SignupRequest) *userservice.SignupPayload {
	v := &userservice.SignupPayload{
		Email: message.Email,
	}
	if message.Tenant != "" {
		v.Tenant = &message.Tenant
	}
	return v
}

// NewSignupResponse builds the gRPC response type from the result of the
// "signup" endpoint of the "user_service" service.
func NewSignupResponse(result *userserviceviews.UserresultView) *user_servicepb.SignupResponse {
	message := &user_servicepb.SignupResponse{}
	if result.ID != nil {
		message.Id = *result.ID
	}
	if result.Email != nil {
		message.Email = *result.Email
	}
	if result.Name != nil {
		message.Name = *result.Name
	}
	if result.IsVerified != nil {
		message.IsVerified = *result.IsVerified
	}
	if result.IsActive != nil {
		message.IsActive = *result.IsActive
	}
	if result.HasAgreed != nil {
		message.HasAgreed = *result.HasAgreed
	}
	if result.AccessToken != nil {
		message.AccessToken = *result.AccessToken
	}
	if result.RefreshToken != nil {
		message.RefreshToken = *result.RefreshToken
	}
	if result.Roles != nil {
		message.Roles = &user_servicepb.UserroleresultCollection{}
		message.Roles.Field = make([]*user_servicepb.Userroleresult, len(result.Roles))
		for i, val := range result.Roles {
			message.Roles.Field[i] = &user_servicepb.Userroleresult{}
			if val.ID != nil {
				message.Roles.Field[i].Id = *val.ID
			}
			if val.UserID != nil {
				message.Roles.Field[i].UserId = *val.UserID
			}
			if val.RoleID != nil {
				message.Roles.Field[i].RoleId = *val.RoleID
			}
			if val.IsActive != nil {
				message.Roles.Field[i].IsActive = *val.IsActive
			}
			if val.Role != nil {
				message.Roles.Field[i].Role = svcUserserviceviewsRoleresultViewToUserServicepbRoleresult(val.Role)
			}
		}
	}
	return message
}

// NewVerifyConfirmationTokenPayload builds the payload of the
// "verifyConfirmationToken" endpoint of the "user_service" service from the
// gRPC request type.
func NewVerifyConfirmationTokenPayload(message *user_servicepb.VerifyConfirmationTokenRequest) *userservice.VerifyConfirmationTokenPayload {
	v := &userservice.VerifyConfirmationTokenPayload{
		UserID:            message.UserId,
		ConfirmationToken: message.ConfirmationToken,
	}
	if message.Tenant != "" {
		v.Tenant = &message.Tenant
	}
	return v
}

// NewVerifyConfirmationTokenResponse builds the gRPC response type from the
// result of the "verifyConfirmationToken" endpoint of the "user_service"
// service.
func NewVerifyConfirmationTokenResponse(result *userserviceviews.UserresultView) *user_servicepb.VerifyConfirmationTokenResponse {
	message := &user_servicepb.VerifyConfirmationTokenResponse{}
	if result.ID != nil {
		message.Id = *result.ID
	}
	if result.Email != nil {
		message.Email = *result.Email
	}
	if result.Name != nil {
		message.Name = *result.Name
	}
	if result.IsVerified != nil {
		message.IsVerified = *result.IsVerified
	}
	if result.IsActive != nil {
		message.IsActive = *result.IsActive
	}
	if result.HasAgreed != nil {
		message.HasAgreed = *result.HasAgreed
	}
	if result.AccessToken != nil {
		message.AccessToken = *result.AccessToken
	}
	if result.RefreshToken != nil {
		message.RefreshToken = *result.RefreshToken
	}
	if result.Roles != nil {
		message.Roles = &user_servicepb.UserroleresultCollection{}
		message.Roles.Field = make([]*user_servicepb.Userroleresult, len(result.Roles))
		for i, val := range result.Roles {
			message.Roles.Field[i] = &user_servicepb.Userroleresult{}
			if val.ID != nil {
				message.Roles.Field[i].Id = *val.ID
			}
			if val.UserID != nil {
				message.Roles.Field[i].UserId = *val.UserID
			}
			if val.RoleID != nil {
				message.Roles.Field[i].RoleId = *val.RoleID
			}
			if val.IsActive != nil {
				message.Roles.Field[i].IsActive = *val.IsActive
			}
			if val.Role != nil {
				message.Roles.Field[i].Role = svcUserserviceviewsRoleresultViewToUserServicepbRoleresult(val.Role)
			}
		}
	}
	return message
}

// NewUpdateUsernamePayload builds the payload of the "updateUsername" endpoint
// of the "user_service" service from the gRPC request type.
func NewUpdateUsernamePayload(message *user_servicepb.UpdateUsernameRequest, token string) *userservice.UpdateUsernamePayload {
	v := &userservice.UpdateUsernamePayload{
		Name: message.Name,
	}
	if message.Tenant != "" {
		v.Tenant = &message.Tenant
	}
	v.Token = token
	return v
}

// NewUpdateUsernameResponse builds the gRPC response type from the result of
// the "updateUsername" endpoint of the "user_service" service.
func NewUpdateUsernameResponse(result *userserviceviews.UserresultView) *user_servicepb.UpdateUsernameResponse {
	message := &user_servicepb.UpdateUsernameResponse{}
	if result.ID != nil {
		message.Id = *result.ID
	}
	if result.Email != nil {
		message.Email = *result.Email
	}
	if result.Name != nil {
		message.Name = *result.Name
	}
	if result.IsVerified != nil {
		message.IsVerified = *result.IsVerified
	}
	if result.IsActive != nil {
		message.IsActive = *result.IsActive
	}
	if result.HasAgreed != nil {
		message.HasAgreed = *result.HasAgreed
	}
	if result.AccessToken != nil {
		message.AccessToken = *result.AccessToken
	}
	if result.RefreshToken != nil {
		message.RefreshToken = *result.RefreshToken
	}
	if result.Roles != nil {
		message.Roles = &user_servicepb.UserroleresultCollection{}
		message.Roles.Field = make([]*user_servicepb.Userroleresult, len(result.Roles))
		for i, val := range result.Roles {
			message.Roles.Field[i] = &user_servicepb.Userroleresult{}
			if val.ID != nil {
				message.Roles.Field[i].Id = *val.ID
			}
			if val.UserID != nil {
				message.Roles.Field[i].UserId = *val.UserID
			}
			if val.RoleID != nil {
				message.Roles.Field[i].RoleId = *val.RoleID
			}
			if val.IsActive != nil {
				message.Roles.Field[i].IsActive = *val.IsActive
			}
			if val.Role != nil {
				message.Roles.Field[i].Role = svcUserserviceviewsRoleresultViewToUserServicepbRoleresult(val.Role)
			}
		}
	}
	return message
}

// NewVerifyPasswordResetTokenPayload builds the payload of the
// "verifyPasswordResetToken" endpoint of the "user_service" service from the
// gRPC request type.
func NewVerifyPasswordResetTokenPayload(message *user_servicepb.VerifyPasswordResetTokenRequest) *userservice.VerifyPasswordResetTokenPayload {
	v := &userservice.VerifyPasswordResetTokenPayload{
		UserID:             message.UserId,
		PasswordResetToken: message.PasswordResetToken,
	}
	if message.Tenant != "" {
		v.Tenant = &message.Tenant
	}
	return v
}

// NewVerifyPasswordResetTokenResponse builds the gRPC response type from the
// result of the "verifyPasswordResetToken" endpoint of the "user_service"
// service.
func NewVerifyPasswordResetTokenResponse(result *userserviceviews.UserresultView) *user_servicepb.VerifyPasswordResetTokenResponse {
	message := &user_servicepb.VerifyPasswordResetTokenResponse{}
	if result.ID != nil {
		message.Id = *result.ID
	}
	if result.Email != nil {
		message.Email = *result.Email
	}
	if result.Name != nil {
		message.Name = *result.Name
	}
	if result.IsVerified != nil {
		message.IsVerified = *result.IsVerified
	}
	if result.IsActive != nil {
		message.IsActive = *result.IsActive
	}
	if result.HasAgreed != nil {
		message.HasAgreed = *result.HasAgreed
	}
	if result.AccessToken != nil {
		message.AccessToken = *result.AccessToken
	}
	if result.RefreshToken != nil {
		message.RefreshToken = *result.RefreshToken
	}
	if result.Roles != nil {
		message.Roles = &user_servicepb.UserroleresultCollection{}
		message.Roles.Field = make([]*user_servicepb.Userroleresult, len(result.Roles))
		for i, val := range result.Roles {
			message.Roles.Field[i] = &user_servicepb.Userroleresult{}
			if val.ID != nil {
				message.Roles.Field[i].Id = *val.ID
			}
			if val.UserID != nil {
				message.Roles.Field[i].UserId = *val.UserID
			}
			if val.RoleID != nil {
				message.Roles.Field[i].RoleId = *val.RoleID
			}
			if val.IsActive != nil {
				message.Roles.Field[i].IsActive = *val.IsActive
			}
			if val.Role != nil {
				message.Roles.Field[i].Role = svcUserserviceviewsRoleresultViewToUserServicepbRoleresult(val.Role)
			}
		}
	}
	return message
}

// NewResetPasswordPayload builds the payload of the "resetPassword" endpoint
// of the "user_service" service from the gRPC request type.
func NewResetPasswordPayload(message *user_servicepb.ResetPasswordRequest) *userservice.ResetPasswordPayload {
	v := &userservice.ResetPasswordPayload{
		Email: message.Email,
	}
	if message.Tenant != "" {
		v.Tenant = &message.Tenant
	}
	return v
}

// NewResetPasswordResponse builds the gRPC response type from the result of
// the "resetPassword" endpoint of the "user_service" service.
func NewResetPasswordResponse(result *userserviceviews.UserresultView) *user_servicepb.ResetPasswordResponse {
	message := &user_servicepb.ResetPasswordResponse{}
	if result.ID != nil {
		message.Id = *result.ID
	}
	if result.Email != nil {
		message.Email = *result.Email
	}
	if result.Name != nil {
		message.Name = *result.Name
	}
	if result.IsVerified != nil {
		message.IsVerified = *result.IsVerified
	}
	if result.IsActive != nil {
		message.IsActive = *result.IsActive
	}
	if result.HasAgreed != nil {
		message.HasAgreed = *result.HasAgreed
	}
	if result.AccessToken != nil {
		message.AccessToken = *result.AccessToken
	}
	if result.RefreshToken != nil {
		message.RefreshToken = *result.RefreshToken
	}
	if result.Roles != nil {
		message.Roles = &user_servicepb.UserroleresultCollection{}
		message.Roles.Field = make([]*user_servicepb.Userroleresult, len(result.Roles))
		for i, val := range result.Roles {
			message.Roles.Field[i] = &user_servicepb.Userroleresult{}
			if val.ID != nil {
				message.Roles.Field[i].Id = *val.ID
			}
			if val.UserID != nil {
				message.Roles.Field[i].UserId = *val.UserID
			}
			if val.RoleID != nil {
				message.Roles.Field[i].RoleId = *val.RoleID
			}
			if val.IsActive != nil {
				message.Roles.Field[i].IsActive = *val.IsActive
			}
			if val.Role != nil {
				message.Roles.Field[i].Role = svcUserserviceviewsRoleresultViewToUserServicepbRoleresult(val.Role)
			}
		}
	}
	return message
}

// NewChangePasswordPayload builds the payload of the "changePassword" endpoint
// of the "user_service" service from the gRPC request type.
func NewChangePasswordPayload(message *user_servicepb.ChangePasswordRequest, token string) *userservice.ChangePasswordPayload {
	v := &userservice.ChangePasswordPayload{
		Password: message.Password,
	}
	if message.Tenant != "" {
		v.Tenant = &message.Tenant
	}
	v.Token = token
	return v
}

// NewChangePasswordResponse builds the gRPC response type from the result of
// the "changePassword" endpoint of the "user_service" service.
func NewChangePasswordResponse(result *userserviceviews.UserresultView) *user_servicepb.ChangePasswordResponse {
	message := &user_servicepb.ChangePasswordResponse{}
	if result.ID != nil {
		message.Id = *result.ID
	}
	if result.Email != nil {
		message.Email = *result.Email
	}
	if result.Name != nil {
		message.Name = *result.Name
	}
	if result.IsVerified != nil {
		message.IsVerified = *result.IsVerified
	}
	if result.IsActive != nil {
		message.IsActive = *result.IsActive
	}
	if result.HasAgreed != nil {
		message.HasAgreed = *result.HasAgreed
	}
	if result.AccessToken != nil {
		message.AccessToken = *result.AccessToken
	}
	if result.RefreshToken != nil {
		message.RefreshToken = *result.RefreshToken
	}
	if result.Roles != nil {
		message.Roles = &user_servicepb.UserroleresultCollection{}
		message.Roles.Field = make([]*user_servicepb.Userroleresult, len(result.Roles))
		for i, val := range result.Roles {
			message.Roles.Field[i] = &user_servicepb.Userroleresult{}
			if val.ID != nil {
				message.Roles.Field[i].Id = *val.ID
			}
			if val.UserID != nil {
				message.Roles.Field[i].UserId = *val.UserID
			}
			if val.RoleID != nil {
				message.Roles.Field[i].RoleId = *val.RoleID
			}
			if val.IsActive != nil {
				message.Roles.Field[i].IsActive = *val.IsActive
			}
			if val.Role != nil {
				message.Roles.Field[i].Role = svcUserserviceviewsRoleresultViewToUserServicepbRoleresult(val.Role)
			}
		}
	}
	return message
}

// NewLoginPayload builds the payload of the "login" endpoint of the
// "user_service" service from the gRPC request type.
func NewLoginPayload(message *user_servicepb.LoginRequest) *userservice.LoginPayload {
	v := &userservice.LoginPayload{
		Email:    message.Email,
		Password: message.Password,
	}
	if message.Tenant != "" {
		v.Tenant = &message.Tenant
	}
	return v
}

// NewLoginResponse builds the gRPC response type from the result of the
// "login" endpoint of the "user_service" service.
func NewLoginResponse(result *userserviceviews.UserresultView) *user_servicepb.LoginResponse {
	message := &user_servicepb.LoginResponse{}
	if result.ID != nil {
		message.Id = *result.ID
	}
	if result.Email != nil {
		message.Email = *result.Email
	}
	if result.Name != nil {
		message.Name = *result.Name
	}
	if result.IsVerified != nil {
		message.IsVerified = *result.IsVerified
	}
	if result.IsActive != nil {
		message.IsActive = *result.IsActive
	}
	if result.HasAgreed != nil {
		message.HasAgreed = *result.HasAgreed
	}
	if result.AccessToken != nil {
		message.AccessToken = *result.AccessToken
	}
	if result.RefreshToken != nil {
		message.RefreshToken = *result.RefreshToken
	}
	if result.Roles != nil {
		message.Roles = &user_servicepb.UserroleresultCollection{}
		message.Roles.Field = make([]*user_servicepb.Userroleresult, len(result.Roles))
		for i, val := range result.Roles {
			message.Roles.Field[i] = &user_servicepb.Userroleresult{}
			if val.ID != nil {
				message.Roles.Field[i].Id = *val.ID
			}
			if val.UserID != nil {
				message.Roles.Field[i].UserId = *val.UserID
			}
			if val.RoleID != nil {
				message.Roles.Field[i].RoleId = *val.RoleID
			}
			if val.IsActive != nil {
				message.Roles.Field[i].IsActive = *val.IsActive
			}
			if val.Role != nil {
				message.Roles.Field[i].Role = svcUserserviceviewsRoleresultViewToUserServicepbRoleresult(val.Role)
			}
		}
	}
	return message
}

// NewRefreshAccessTokenPayload builds the payload of the "refreshAccessToken"
// endpoint of the "user_service" service from the gRPC request type.
func NewRefreshAccessTokenPayload(message *user_servicepb.RefreshAccessTokenRequest, token string) *userservice.RefreshAccessTokenPayload {
	v := &userservice.RefreshAccessTokenPayload{}
	if message.Tenant != "" {
		v.Tenant = &message.Tenant
	}
	v.Token = token
	return v
}

// NewRefreshAccessTokenResponse builds the gRPC response type from the result
// of the "refreshAccessToken" endpoint of the "user_service" service.
func NewRefreshAccessTokenResponse(result *userserviceviews.UserresultView) *user_servicepb.RefreshAccessTokenResponse {
	message := &user_servicepb.RefreshAccessTokenResponse{}
	if result.ID != nil {
		message.Id = *result.ID
	}
	if result.Email != nil {
		message.Email = *result.Email
	}
	if result.Name != nil {
		message.Name = *result.Name
	}
	if result.IsVerified != nil {
		message.IsVerified = *result.IsVerified
	}
	if result.IsActive != nil {
		message.IsActive = *result.IsActive
	}
	if result.HasAgreed != nil {
		message.HasAgreed = *result.HasAgreed
	}
	if result.AccessToken != nil {
		message.AccessToken = *result.AccessToken
	}
	if result.RefreshToken != nil {
		message.RefreshToken = *result.RefreshToken
	}
	if result.Roles != nil {
		message.Roles = &user_servicepb.UserroleresultCollection{}
		message.Roles.Field = make([]*user_servicepb.Userroleresult, len(result.Roles))
		for i, val := range result.Roles {
			message.Roles.Field[i] = &user_servicepb.Userroleresult{}
			if val.ID != nil {
				message.Roles.Field[i].Id = *val.ID
			}
			if val.UserID != nil {
				message.Roles.Field[i].UserId = *val.UserID
			}
			if val.RoleID != nil {
				message.Roles.Field[i].RoleId = *val.RoleID
			}
			if val.IsActive != nil {
				message.Roles.Field[i].IsActive = *val.IsActive
			}
			if val.Role != nil {
				message.Roles.Field[i].Role = svcUserserviceviewsRoleresultViewToUserServicepbRoleresult(val.Role)
			}
		}
	}
	return message
}

// NewLogoutPayload builds the payload of the "logout" endpoint of the
// "user_service" service from the gRPC request type.
func NewLogoutPayload(message *user_servicepb.LogoutRequest, token string) *userservice.LogoutPayload {
	v := &userservice.LogoutPayload{}
	if message.Tenant != "" {
		v.Tenant = &message.Tenant
	}
	v.Token = token
	return v
}

// NewLogoutResponse builds the gRPC response type from the result of the
// "logout" endpoint of the "user_service" service.
func NewLogoutResponse(result *userservice.MessageResult) *user_servicepb.LogoutResponse {
	message := &user_servicepb.LogoutResponse{}
	if result.Type != nil {
		message.Type = *result.Type
	}
	if result.Desc != nil {
		message.Desc = *result.Desc
	}
	return message
}

// NewListUsersPayload builds the payload of the "listUsers" endpoint of the
// "user_service" service from the gRPC request type.
func NewListUsersPayload(message *user_servicepb.ListUsersRequest, token string) *userservice.ListUsersPayload {
	v := &userservice.ListUsersPayload{}
	if message.Email != "" {
		v.Email = &message.Email
	}
	if message.MobileNumber != "" {
		v.MobileNumber = &message.MobileNumber
	}
	if message.Name != "" {
		v.Name = &message.Name
	}
	if message.IsActive != "" {
		v.IsActive = &message.IsActive
	}
	if message.IsVerified != "" {
		v.IsVerified = &message.IsVerified
	}
	if message.HasAgreed != "" {
		v.HasAgreed = &message.HasAgreed
	}
	if message.Role != "" {
		v.Role = &message.Role
	}
	if message.PageNumber != 0 {
		pageNumberptr := int(message.PageNumber)
		v.PageNumber = &pageNumberptr
	}
	if message.PageSize != 0 {
		pageSizeptr := int(message.PageSize)
		v.PageSize = &pageSizeptr
	}
	if message.Tenant != "" {
		v.Tenant = &message.Tenant
	}
	v.Token = token
	return v
}

// NewListUsersResponse builds the gRPC response type from the result of the
// "listUsers" endpoint of the "user_service" service.
func NewListUsersResponse(result *userservice.ListUsersResult) *user_servicepb.ListUsersResponse {
	message := &user_servicepb.ListUsersResponse{}
	if result.Results != nil {
		message.Results = &user_servicepb.UserresultCollection{}
		message.Results.Field = make([]*user_servicepb.Userresult, len(result.Results))
		for i, val := range result.Results {
			message.Results.Field[i] = &user_servicepb.Userresult{}
			if val.ID != nil {
				message.Results.Field[i].Id = *val.ID
			}
			if val.Email != nil {
				message.Results.Field[i].Email = *val.Email
			}
			if val.Name != nil {
				message.Results.Field[i].Name = *val.Name
			}
			if val.IsVerified != nil {
				message.Results.Field[i].IsVerified = *val.IsVerified
			}
			if val.IsActive != nil {
				message.Results.Field[i].IsActive = *val.IsActive
			}
			if val.HasAgreed != nil {
				message.Results.Field[i].HasAgreed = *val.HasAgreed
			}
			if val.AccessToken != nil {
				message.Results.Field[i].AccessToken = *val.AccessToken
			}
			if val.RefreshToken != nil {
				message.Results.Field[i].RefreshToken = *val.RefreshToken
			}
			if val.Roles != nil {
				message.Results.Field[i].Roles = &user_servicepb.UserroleresultCollection{}
				message.Results.Field[i].Roles.Field = make([]*user_servicepb.Userroleresult, len(val.Roles))
				for j, val := range val.Roles {
					message.Results.Field[i].Roles.Field[j] = &user_servicepb.Userroleresult{}
					if val.ID != nil {
						message.Results.Field[i].Roles.Field[j].Id = *val.ID
					}
					if val.UserID != nil {
						message.Results.Field[i].Roles.Field[j].UserId = *val.UserID
					}
					if val.RoleID != nil {
						message.Results.Field[i].Roles.Field[j].RoleId = *val.RoleID
					}
					if val.IsActive != nil {
						message.Results.Field[i].Roles.Field[j].IsActive = *val.IsActive
					}
					if val.Role != nil {
						message.Results.Field[i].Roles.Field[j].Role = svcUserserviceRoleresultToUserServicepbRoleresult(val.Role)
					}
				}
			}
		}
	}
	if result.PageInfo != nil {
		message.PageInfo = svcUserservicePageinfoToUserServicepbPageinfo(result.PageInfo)
	}
	return message
}

// svcUserserviceviewsRoleresultViewToUserServicepbRoleresult builds a value of
// type *user_servicepb.Roleresult from a value of type
// *userserviceviews.RoleresultView.
func svcUserserviceviewsRoleresultViewToUserServicepbRoleresult(v *userserviceviews.RoleresultView) *user_servicepb.Roleresult {
	if v == nil {
		return nil
	}
	res := &user_servicepb.Roleresult{}
	if v.ID != nil {
		res.Id = *v.ID
	}
	if v.Name != nil {
		res.Name = *v.Name
	}
	if v.ServiceID != nil {
		res.ServiceId = *v.ServiceID
	}
	if v.IsActive != nil {
		res.IsActive = *v.IsActive
	}

	return res
}

// protobufUserServicepbRoleresultToUserserviceviewsRoleresultView builds a
// value of type *userserviceviews.RoleresultView from a value of type
// *user_servicepb.Roleresult.
func protobufUserServicepbRoleresultToUserserviceviewsRoleresultView(v *user_servicepb.Roleresult) *userserviceviews.RoleresultView {
	if v == nil {
		return nil
	}
	res := &userserviceviews.RoleresultView{
		IsActive: &v.IsActive,
	}
	if v.Id != "" {
		res.ID = &v.Id
	}
	if v.Name != "" {
		res.Name = &v.Name
	}
	if v.ServiceId != "" {
		res.ServiceID = &v.ServiceId
	}

	return res
}

// svcUserserviceRoleresultToUserServicepbRoleresult builds a value of type
// *user_servicepb.Roleresult from a value of type *userservice.Roleresult.
func svcUserserviceRoleresultToUserServicepbRoleresult(v *userservice.Roleresult) *user_servicepb.Roleresult {
	if v == nil {
		return nil
	}
	res := &user_servicepb.Roleresult{}
	if v.ID != nil {
		res.Id = *v.ID
	}
	if v.Name != nil {
		res.Name = *v.Name
	}
	if v.ServiceID != nil {
		res.ServiceId = *v.ServiceID
	}
	if v.IsActive != nil {
		res.IsActive = *v.IsActive
	}

	return res
}

// svcUserservicePageinfoToUserServicepbPageinfo builds a value of type
// *user_servicepb.Pageinfo from a value of type *userservice.Pageinfo.
func svcUserservicePageinfoToUserServicepbPageinfo(v *userservice.Pageinfo) *user_servicepb.Pageinfo {
	if v == nil {
		return nil
	}
	res := &user_servicepb.Pageinfo{}
	if v.PageNumber != nil {
		res.PageNumber = int32(*v.PageNumber)
	}
	if v.PageSize != nil {
		res.PageSize = int32(*v.PageSize)
	}
	if v.Count != nil {
		res.Count = int32(*v.Count)
	}
	if v.TotalCount != nil {
		res.TotalCount = *v.TotalCount
	}

	return res
}

// protobufUserServicepbRoleresultToUserserviceRoleresult builds a value of
// type *userservice.Roleresult from a value of type *user_servicepb.Roleresult.
func protobufUserServicepbRoleresultToUserserviceRoleresult(v *user_servicepb.Roleresult) *userservice.Roleresult {
	if v == nil {
		return nil
	}
	res := &userservice.Roleresult{
		IsActive: &v.IsActive,
	}
	if v.Id != "" {
		res.ID = &v.Id
	}
	if v.Name != "" {
		res.Name = &v.Name
	}
	if v.ServiceId != "" {
		res.ServiceID = &v.ServiceId
	}

	return res
}

// protobufUserServicepbPageinfoToUserservicePageinfo builds a value of type
// *userservice.Pageinfo from a value of type *user_servicepb.Pageinfo.
func protobufUserServicepbPageinfoToUserservicePageinfo(v *user_servicepb.Pageinfo) *userservice.Pageinfo {
	if v == nil {
		return nil
	}
	res := &userservice.Pageinfo{}
	if v.PageNumber != 0 {
		pageNumberptr := int(v.PageNumber)
		res.PageNumber = &pageNumberptr
	}
	if v.PageSize != 0 {
		pageSizeptr := int(v.PageSize)
		res.PageSize = &pageSizeptr
	}
	if v.Count != 0 {
		countptr := int(v.Count)
		res.Count = &countptr
	}
	if v.TotalCount != 0 {
		res.TotalCount = &v.TotalCount
	}

	return res
}
