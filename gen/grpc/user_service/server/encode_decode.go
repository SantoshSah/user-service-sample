// Code generated by goa v3.2.4, DO NOT EDIT.
//
// user_service gRPC server encoders and decoders
//
// Command:
// $ goa gen github.com/SantoshSah/user-service-sample/design

package server

import (
	"context"
	"strings"

	user_servicepb "github.com/SantoshSah/user-service-sample/gen/grpc/user_service/pb"
	userservice "github.com/SantoshSah/user-service-sample/gen/user_service"
	userserviceviews "github.com/SantoshSah/user-service-sample/gen/user_service/views"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/metadata"
)

// EncodeSignupResponse encodes responses from the "user_service" service
// "signup" endpoint.
func EncodeSignupResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*userserviceviews.Userresult)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user_service", "signup", "*userserviceviews.Userresult", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewSignupResponse(result)
	return resp, nil
}

// DecodeSignupRequest decodes requests sent to "user_service" service "signup"
// endpoint.
func DecodeSignupRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *user_servicepb.SignupRequest
		ok      bool
	)
	{
		if message, ok = v.(*user_servicepb.SignupRequest); !ok {
			return nil, goagrpc.ErrInvalidType("user_service", "signup", "*user_servicepb.SignupRequest", v)
		}
	}
	var payload *userservice.SignupPayload
	{
		payload = NewSignupPayload(message)
	}
	return payload, nil
}

// EncodeVerifyConfirmationTokenResponse encodes responses from the
// "user_service" service "verifyConfirmationToken" endpoint.
func EncodeVerifyConfirmationTokenResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*userserviceviews.Userresult)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user_service", "verifyConfirmationToken", "*userserviceviews.Userresult", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewVerifyConfirmationTokenResponse(result)
	return resp, nil
}

// DecodeVerifyConfirmationTokenRequest decodes requests sent to "user_service"
// service "verifyConfirmationToken" endpoint.
func DecodeVerifyConfirmationTokenRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *user_servicepb.VerifyConfirmationTokenRequest
		ok      bool
	)
	{
		if message, ok = v.(*user_servicepb.VerifyConfirmationTokenRequest); !ok {
			return nil, goagrpc.ErrInvalidType("user_service", "verifyConfirmationToken", "*user_servicepb.VerifyConfirmationTokenRequest", v)
		}
	}
	var payload *userservice.VerifyConfirmationTokenPayload
	{
		payload = NewVerifyConfirmationTokenPayload(message)
	}
	return payload, nil
}

// EncodeUpdateUsernameResponse encodes responses from the "user_service"
// service "updateUsername" endpoint.
func EncodeUpdateUsernameResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*userserviceviews.Userresult)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user_service", "updateUsername", "*userserviceviews.Userresult", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewUpdateUsernameResponse(result)
	return resp, nil
}

// DecodeUpdateUsernameRequest decodes requests sent to "user_service" service
// "updateUsername" endpoint.
func DecodeUpdateUsernameRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		token string
		err   error
	)
	{
		if vals := md.Get("authorization"); len(vals) == 0 {
			err = goa.MergeErrors(err, goa.MissingFieldError("authorization", "metadata"))
		} else {
			token = vals[0]
		}
	}
	if err != nil {
		return nil, err
	}
	var (
		message *user_servicepb.UpdateUsernameRequest
		ok      bool
	)
	{
		if message, ok = v.(*user_servicepb.UpdateUsernameRequest); !ok {
			return nil, goagrpc.ErrInvalidType("user_service", "updateUsername", "*user_servicepb.UpdateUsernameRequest", v)
		}
	}
	var payload *userservice.UpdateUsernamePayload
	{
		payload = NewUpdateUsernamePayload(message, token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}
	}
	return payload, nil
}

// EncodeVerifyPasswordResetTokenResponse encodes responses from the
// "user_service" service "verifyPasswordResetToken" endpoint.
func EncodeVerifyPasswordResetTokenResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*userserviceviews.Userresult)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user_service", "verifyPasswordResetToken", "*userserviceviews.Userresult", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewVerifyPasswordResetTokenResponse(result)
	return resp, nil
}

// DecodeVerifyPasswordResetTokenRequest decodes requests sent to
// "user_service" service "verifyPasswordResetToken" endpoint.
func DecodeVerifyPasswordResetTokenRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *user_servicepb.VerifyPasswordResetTokenRequest
		ok      bool
	)
	{
		if message, ok = v.(*user_servicepb.VerifyPasswordResetTokenRequest); !ok {
			return nil, goagrpc.ErrInvalidType("user_service", "verifyPasswordResetToken", "*user_servicepb.VerifyPasswordResetTokenRequest", v)
		}
	}
	var payload *userservice.VerifyPasswordResetTokenPayload
	{
		payload = NewVerifyPasswordResetTokenPayload(message)
	}
	return payload, nil
}

// EncodeResetPasswordResponse encodes responses from the "user_service"
// service "resetPassword" endpoint.
func EncodeResetPasswordResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*userserviceviews.Userresult)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user_service", "resetPassword", "*userserviceviews.Userresult", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewResetPasswordResponse(result)
	return resp, nil
}

// DecodeResetPasswordRequest decodes requests sent to "user_service" service
// "resetPassword" endpoint.
func DecodeResetPasswordRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *user_servicepb.ResetPasswordRequest
		ok      bool
	)
	{
		if message, ok = v.(*user_servicepb.ResetPasswordRequest); !ok {
			return nil, goagrpc.ErrInvalidType("user_service", "resetPassword", "*user_servicepb.ResetPasswordRequest", v)
		}
	}
	var payload *userservice.ResetPasswordPayload
	{
		payload = NewResetPasswordPayload(message)
	}
	return payload, nil
}

// EncodeChangePasswordResponse encodes responses from the "user_service"
// service "changePassword" endpoint.
func EncodeChangePasswordResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*userserviceviews.Userresult)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user_service", "changePassword", "*userserviceviews.Userresult", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewChangePasswordResponse(result)
	return resp, nil
}

// DecodeChangePasswordRequest decodes requests sent to "user_service" service
// "changePassword" endpoint.
func DecodeChangePasswordRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		token string
		err   error
	)
	{
		if vals := md.Get("authorization"); len(vals) == 0 {
			err = goa.MergeErrors(err, goa.MissingFieldError("authorization", "metadata"))
		} else {
			token = vals[0]
		}
	}
	if err != nil {
		return nil, err
	}
	var (
		message *user_servicepb.ChangePasswordRequest
		ok      bool
	)
	{
		if message, ok = v.(*user_servicepb.ChangePasswordRequest); !ok {
			return nil, goagrpc.ErrInvalidType("user_service", "changePassword", "*user_servicepb.ChangePasswordRequest", v)
		}
	}
	var payload *userservice.ChangePasswordPayload
	{
		payload = NewChangePasswordPayload(message, token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}
	}
	return payload, nil
}

// EncodeLoginResponse encodes responses from the "user_service" service
// "login" endpoint.
func EncodeLoginResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*userserviceviews.Userresult)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user_service", "login", "*userserviceviews.Userresult", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewLoginResponse(result)
	return resp, nil
}

// DecodeLoginRequest decodes requests sent to "user_service" service "login"
// endpoint.
func DecodeLoginRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *user_servicepb.LoginRequest
		ok      bool
	)
	{
		if message, ok = v.(*user_servicepb.LoginRequest); !ok {
			return nil, goagrpc.ErrInvalidType("user_service", "login", "*user_servicepb.LoginRequest", v)
		}
	}
	var payload *userservice.LoginPayload
	{
		payload = NewLoginPayload(message)
	}
	return payload, nil
}

// EncodeRefreshAccessTokenResponse encodes responses from the "user_service"
// service "refreshAccessToken" endpoint.
func EncodeRefreshAccessTokenResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*userserviceviews.Userresult)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user_service", "refreshAccessToken", "*userserviceviews.Userresult", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewRefreshAccessTokenResponse(result)
	return resp, nil
}

// DecodeRefreshAccessTokenRequest decodes requests sent to "user_service"
// service "refreshAccessToken" endpoint.
func DecodeRefreshAccessTokenRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		token string
		err   error
	)
	{
		if vals := md.Get("authorization"); len(vals) == 0 {
			err = goa.MergeErrors(err, goa.MissingFieldError("authorization", "metadata"))
		} else {
			token = vals[0]
		}
	}
	if err != nil {
		return nil, err
	}
	var (
		message *user_servicepb.RefreshAccessTokenRequest
		ok      bool
	)
	{
		if message, ok = v.(*user_servicepb.RefreshAccessTokenRequest); !ok {
			return nil, goagrpc.ErrInvalidType("user_service", "refreshAccessToken", "*user_servicepb.RefreshAccessTokenRequest", v)
		}
	}
	var payload *userservice.RefreshAccessTokenPayload
	{
		payload = NewRefreshAccessTokenPayload(message, token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}
	}
	return payload, nil
}

// EncodeLogoutResponse encodes responses from the "user_service" service
// "logout" endpoint.
func EncodeLogoutResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*userservice.MessageResult)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user_service", "logout", "*userservice.MessageResult", v)
	}
	resp := NewLogoutResponse(result)
	return resp, nil
}

// DecodeLogoutRequest decodes requests sent to "user_service" service "logout"
// endpoint.
func DecodeLogoutRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		token string
		err   error
	)
	{
		if vals := md.Get("authorization"); len(vals) == 0 {
			err = goa.MergeErrors(err, goa.MissingFieldError("authorization", "metadata"))
		} else {
			token = vals[0]
		}
	}
	if err != nil {
		return nil, err
	}
	var (
		message *user_servicepb.LogoutRequest
		ok      bool
	)
	{
		if message, ok = v.(*user_servicepb.LogoutRequest); !ok {
			return nil, goagrpc.ErrInvalidType("user_service", "logout", "*user_servicepb.LogoutRequest", v)
		}
	}
	var payload *userservice.LogoutPayload
	{
		payload = NewLogoutPayload(message, token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}
	}
	return payload, nil
}

// EncodeListUsersResponse encodes responses from the "user_service" service
// "listUsers" endpoint.
func EncodeListUsersResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*userservice.ListUsersResult)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user_service", "listUsers", "*userservice.ListUsersResult", v)
	}
	resp := NewListUsersResponse(result)
	return resp, nil
}

// DecodeListUsersRequest decodes requests sent to "user_service" service
// "listUsers" endpoint.
func DecodeListUsersRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		token string
		err   error
	)
	{
		if vals := md.Get("authorization"); len(vals) == 0 {
			err = goa.MergeErrors(err, goa.MissingFieldError("authorization", "metadata"))
		} else {
			token = vals[0]
		}
	}
	if err != nil {
		return nil, err
	}
	var (
		message *user_servicepb.ListUsersRequest
		ok      bool
	)
	{
		if message, ok = v.(*user_servicepb.ListUsersRequest); !ok {
			return nil, goagrpc.ErrInvalidType("user_service", "listUsers", "*user_servicepb.ListUsersRequest", v)
		}
	}
	var payload *userservice.ListUsersPayload
	{
		payload = NewListUsersPayload(message, token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}
	}
	return payload, nil
}
